//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyElement;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * <p>Java class for Extension complex type</p>.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 *
 * <pre>{@code
 * <complexType name="Extension">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="Owner" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         <any namespace='##other' maxOccurs="unbounded" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Extension", propOrder = { "owner", "any" })
@XmlSeeAlso(
  {
    TargetIdentifierExtension.class,
    TaskDetailsExtensions.class,
    MediationDetailsExtensions.class,
    TaskStatusExtensions.class,
    TaskIssueExtensions.class,
    NEIssueExtensions.class,
    DestinationDetailsExtensions.class,
  }
)
public class Extension implements Copyable {

  @XmlElement(name = "Owner", required = true)
  protected String owner;

  @XmlAnyElement(lax = true)
  protected List<Object> any;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public Extension() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a Extension copying the state of another Extension
   *
   * @param _other
   *     The original Extension from which to copy state.
   */
  public Extension(final Extension _other) {
    this.owner = _other.owner;
    this.any = ((_other.any == null) ? null : new ArrayList<>(_other.any));
  }

  /**
   * Gets the value of the owner property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getOwner() {
    return owner;
  }

  /**
   * Sets the value of the owner property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setOwner(String value) {
    this.owner = value;
  }

  /**
   * Gets the value of the any property.
   *
   * <p>This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the JAXB object.
   * This is why there is not a <CODE>set</CODE> method for the any property.</p>
   *
   * <p>
   * For example, to add a new item, do as follows:
   * </p>
   * <pre>
   * getAny().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link Object }
   * </p>
   *
   *
   * @return
   *     The value of the any property.
   */
  public List<Object> getAny() {
    if (any == null) {
      any = new ArrayList<>();
    }
    return this.any;
  }

  @Override
  public Extension createCopy() {
    final Extension _newObject;
    try {
      _newObject = ((Extension) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.owner = this.owner;
    _newObject.any = ((this.any == null) ? null : new ArrayList<>(this.any));
    return _newObject;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final Extension.Builder<_B> _other) {
    _other.owner = this.owner;
  }

  public <_B> Extension.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new Extension.Builder<_B>(_parentBuilder, this, true);
  }

  public Extension.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static Extension.Builder<Void> builder() {
    return new Extension.Builder<>(null, null, false);
  }

  public static <_B> Extension.Builder<_B> copyOf(final Extension _other) {
    final Extension.Builder<_B> _newBuilder = new Extension.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final Extension.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree ownerPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("owner"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (ownerPropertyTree != null)
          : ((ownerPropertyTree == null) || (!ownerPropertyTree.isLeaf())))
    ) {
      _other.owner = this.owner;
    }
  }

  public <_B> Extension.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new Extension.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public Extension.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> Extension.Builder<_B> copyOf(
    final Extension _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final Extension.Builder<_B> _newBuilder = new Extension.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static Extension.Builder<Void> copyExcept(final Extension _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static Extension.Builder<Void> copyOnly(final Extension _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final Extension _storedValue;
    private String owner;
    private List<Buildable> any;

    public Builder(final _B _parentBuilder, final Extension _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          this.owner = _other.owner;
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final Extension _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree ownerPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("owner"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (ownerPropertyTree != null)
                : ((ownerPropertyTree == null) || (!ownerPropertyTree.isLeaf())))
          ) {
            this.owner = _other.owner;
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends Extension> _P init(final _P _product) {
      _product.owner = this.owner;
      if (this.any != null) {
        final List<Object> any = new ArrayList<>(this.any.size());
        for (Buildable _item : this.any) {
          any.add(((Object) _item.build()));
        }
        _product.any = any;
      }
      return _product;
    }

    /**
     * Sets the new value of "owner" (any previous value will be replaced)
     *
     * @param owner
     *     New value of the "owner" property.
     */
    public Extension.Builder<_B> withOwner(final String owner) {
      this.owner = owner;
      return this;
    }

    /**
     * Adds the given items to the value of "any"
     *
     * @param any
     *     Items to add to the value of the "any" property
     */
    public Extension.Builder<_B> addAny(final Iterable<?> any) {
      if (any != null) {
        if (this.any == null) {
          this.any = new ArrayList<>();
        }
        for (Object _item : any) {
          this.any.add(new Buildable.PrimitiveBuildable(_item));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "any" (any previous value will be replaced)
     *
     * @param any
     *     New value of the "any" property.
     */
    public Extension.Builder<_B> withAny(final Iterable<?> any) {
      if (this.any != null) {
        this.any.clear();
      }
      return addAny(any);
    }

    /**
     * Adds the given items to the value of "any"
     *
     * @param any
     *     Items to add to the value of the "any" property
     */
    public Extension.Builder<_B> addAny(Object... any) {
      addAny(Arrays.asList(any));
      return this;
    }

    /**
     * Sets the new value of "any" (any previous value will be replaced)
     *
     * @param any
     *     New value of the "any" property.
     */
    public Extension.Builder<_B> withAny(Object... any) {
      withAny(Arrays.asList(any));
      return this;
    }

    @Override
    public Extension build() {
      if (_storedValue == null) {
        return this.init(new Extension());
      } else {
        return ((Extension) _storedValue);
      }
    }

    public Extension.Builder<_B> copyOf(final Extension _other) {
      _other.copyTo(this);
      return this;
    }

    public Extension.Builder<_B> copyOf(final Extension.Builder _other) {
      return copyOf(_other.build());
    }
  }
}
