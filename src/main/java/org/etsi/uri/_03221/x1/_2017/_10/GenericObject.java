//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.HashMap;
import java.util.Map;
import org.etsi.uri._03221.x1._2017._10.hashedid.HashContext;

/**
 * <p>Java class for GenericObject complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="GenericObject">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="objectId" type="{http://uri.etsi.org/03221/X1/2017/10}GenericObjectID"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GenericObject", propOrder = { "objectId" })
@XmlSeeAlso({ HashContext.class })
public abstract class GenericObject implements Copyable, PartialCopyable {

  @XmlElement(required = true)
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "token")
  protected String objectId;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  protected GenericObject() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a GenericObject copying the state of another GenericObject
   *
   * @param _other
   *     The original GenericObject from which to copy state.
   */
  protected GenericObject(final GenericObject _other) {
    this.objectId = _other.objectId;
  }

  /**
   * Instantiates a GenericObject copying the state of another GenericObject
   *
   * @param _other
   *     The original GenericObject from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  protected GenericObject(
    final GenericObject _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectIdPropertyTree != null)
          : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
    ) {
      this.objectId = _other.objectId;
    }
  }

  /**
   * Gets the value of the objectId property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getObjectId() {
    return objectId;
  }

  /**
   * Sets the value of the objectId property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setObjectId(String value) {
    this.objectId = value;
  }

  @Override
  public GenericObject createCopy() {
    final GenericObject _newObject;
    try {
      _newObject = ((GenericObject) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.objectId = this.objectId;
    return _newObject;
  }

  @Override
  public GenericObject createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final GenericObject _newObject;
    try {
      _newObject = ((GenericObject) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectIdPropertyTree != null)
          : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
    ) {
      _newObject.objectId = this.objectId;
    }
    return _newObject;
  }

  @Override
  public GenericObject copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public GenericObject copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final GenericObject.Builder<_B> _other) {
    _other.objectId = this.objectId;
  }

  public abstract <_B> GenericObject.Builder<_B> newCopyBuilder(final _B _parentBuilder);

  public abstract GenericObject.Builder<Void> newCopyBuilder();

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final GenericObject.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectIdPropertyTree != null)
          : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
    ) {
      _other.objectId = this.objectId;
    }
  }

  public abstract <_B> GenericObject.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  );

  public abstract GenericObject.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  );

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final GenericObject _storedValue;
    private String objectId;

    public Builder(final _B _parentBuilder, final GenericObject _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          this.objectId = _other.objectId;
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final GenericObject _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (objectIdPropertyTree != null)
                : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
          ) {
            this.objectId = _other.objectId;
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends GenericObject> _P init(final _P _product) {
      _product.objectId = this.objectId;
      return _product;
    }

    /**
     * Sets the new value of "objectId" (any previous value will be replaced)
     *
     * @param objectId
     *     New value of the "objectId" property.
     */
    public GenericObject.Builder<_B> withObjectId(final String objectId) {
      this.objectId = objectId;
      return this;
    }

    @Override
    public GenericObject build() {
      return ((GenericObject) _storedValue);
    }

    public GenericObject.Builder<_B> copyOf(final GenericObject _other) {
      _other.copyTo(this);
      return this;
    }

    public GenericObject.Builder<_B> copyOf(final GenericObject.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends GenericObject.Selector<GenericObject.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static GenericObject.Select _root() {
      return new GenericObject.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, GenericObject.Selector<TRoot, TParent>> objectId = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.objectId != null) {
        products.put("objectId", this.objectId.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, GenericObject.Selector<TRoot, TParent>> objectId() {
      return (
        (this.objectId == null)
          ? this.objectId = new com.kscs.util.jaxb.Selector<>(this._root, this, "objectId")
          : this.objectId
      );
    }
  }
}
