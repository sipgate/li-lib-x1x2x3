//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

/*
 * SPDX-License-Identifier: MIT
 */
package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>Java class for ListOfGenericObjectIDs complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ListOfGenericObjectIDs">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="objectId" type="{http://uri.etsi.org/03221/X1/2017/10}GenericObjectID" maxOccurs="unbounded" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ListOfGenericObjectIDs", propOrder = { "objectId" })
public class ListOfGenericObjectIDs implements Copyable, PartialCopyable {

  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "token")
  protected List<String> objectId;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ListOfGenericObjectIDs() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ListOfGenericObjectIDs copying the state of another ListOfGenericObjectIDs
   *
   * @param _other
   *     The original ListOfGenericObjectIDs from which to copy state.
   */
  public ListOfGenericObjectIDs(final ListOfGenericObjectIDs _other) {
    this.objectId = ((_other.objectId == null) ? null : new ArrayList<>(_other.objectId));
  }

  /**
   * Instantiates a ListOfGenericObjectIDs copying the state of another ListOfGenericObjectIDs
   *
   * @param _other
   *     The original ListOfGenericObjectIDs from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public ListOfGenericObjectIDs(
    final ListOfGenericObjectIDs _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectIdPropertyTree != null)
          : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
    ) {
      this.objectId = ((_other.objectId == null) ? null : new ArrayList<>(_other.objectId));
    }
  }

  /**
   * Gets the value of the objectId property.
   *
   * <p>
   * This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the Jakarta XML Binding object.
   * This is why there is not a {@code set} method for the objectId property.
   *
   * <p>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getObjectId().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link String }
   *
   *
   * @return
   *     The value of the objectId property.
   */
  public List<String> getObjectId() {
    if (objectId == null) {
      objectId = new ArrayList<>();
    }
    return this.objectId;
  }

  @Override
  public ListOfGenericObjectIDs createCopy() {
    final ListOfGenericObjectIDs _newObject;
    try {
      _newObject = ((ListOfGenericObjectIDs) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.objectId = ((this.objectId == null) ? null : new ArrayList<>(this.objectId));
    return _newObject;
  }

  @Override
  public ListOfGenericObjectIDs createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final ListOfGenericObjectIDs _newObject;
    try {
      _newObject = ((ListOfGenericObjectIDs) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectIdPropertyTree != null)
          : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
    ) {
      _newObject.objectId = ((this.objectId == null) ? null : new ArrayList<>(this.objectId));
    }
    return _newObject;
  }

  @Override
  public ListOfGenericObjectIDs copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public ListOfGenericObjectIDs copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ListOfGenericObjectIDs.Builder<_B> _other) {
    if (this.objectId == null) {
      _other.objectId = null;
    } else {
      _other.objectId = new ArrayList<>();
      for (String _item : this.objectId) {
        _other.objectId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
      }
    }
  }

  public <_B> ListOfGenericObjectIDs.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ListOfGenericObjectIDs.Builder<_B>(_parentBuilder, this, true);
  }

  public ListOfGenericObjectIDs.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ListOfGenericObjectIDs.Builder<Void> builder() {
    return new ListOfGenericObjectIDs.Builder<>(null, null, false);
  }

  public static <_B> ListOfGenericObjectIDs.Builder<_B> copyOf(final ListOfGenericObjectIDs _other) {
    final ListOfGenericObjectIDs.Builder<_B> _newBuilder = new ListOfGenericObjectIDs.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ListOfGenericObjectIDs.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectIdPropertyTree != null)
          : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
    ) {
      if (this.objectId == null) {
        _other.objectId = null;
      } else {
        _other.objectId = new ArrayList<>();
        for (String _item : this.objectId) {
          _other.objectId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
        }
      }
    }
  }

  public <_B> ListOfGenericObjectIDs.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ListOfGenericObjectIDs.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public ListOfGenericObjectIDs.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ListOfGenericObjectIDs.Builder<_B> copyOf(
    final ListOfGenericObjectIDs _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ListOfGenericObjectIDs.Builder<_B> _newBuilder = new ListOfGenericObjectIDs.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ListOfGenericObjectIDs.Builder<Void> copyExcept(
    final ListOfGenericObjectIDs _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ListOfGenericObjectIDs.Builder<Void> copyOnly(
    final ListOfGenericObjectIDs _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final ListOfGenericObjectIDs _storedValue;
    private List<Buildable> objectId;

    public Builder(final _B _parentBuilder, final ListOfGenericObjectIDs _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          if (_other.objectId == null) {
            this.objectId = null;
          } else {
            this.objectId = new ArrayList<>();
            for (String _item : _other.objectId) {
              this.objectId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
            }
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ListOfGenericObjectIDs _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree objectIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectId"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (objectIdPropertyTree != null)
                : ((objectIdPropertyTree == null) || (!objectIdPropertyTree.isLeaf())))
          ) {
            if (_other.objectId == null) {
              this.objectId = null;
            } else {
              this.objectId = new ArrayList<>();
              for (String _item : _other.objectId) {
                this.objectId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
              }
            }
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends ListOfGenericObjectIDs> _P init(final _P _product) {
      if (this.objectId != null) {
        final List<String> objectId = new ArrayList<>(this.objectId.size());
        for (Buildable _item : this.objectId) {
          objectId.add(((String) _item.build()));
        }
        _product.objectId = objectId;
      }
      return _product;
    }

    /**
     * Adds the given items to the value of "objectId"
     *
     * @param objectId
     *     Items to add to the value of the "objectId" property
     */
    public ListOfGenericObjectIDs.Builder<_B> addObjectId(final Iterable<? extends String> objectId) {
      if (objectId != null) {
        if (this.objectId == null) {
          this.objectId = new ArrayList<>();
        }
        for (String _item : objectId) {
          this.objectId.add(new Buildable.PrimitiveBuildable(_item));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "objectId" (any previous value will be replaced)
     *
     * @param objectId
     *     New value of the "objectId" property.
     */
    public ListOfGenericObjectIDs.Builder<_B> withObjectId(final Iterable<? extends String> objectId) {
      if (this.objectId != null) {
        this.objectId.clear();
      }
      return addObjectId(objectId);
    }

    /**
     * Adds the given items to the value of "objectId"
     *
     * @param objectId
     *     Items to add to the value of the "objectId" property
     */
    public ListOfGenericObjectIDs.Builder<_B> addObjectId(String... objectId) {
      addObjectId(Arrays.asList(objectId));
      return this;
    }

    /**
     * Sets the new value of "objectId" (any previous value will be replaced)
     *
     * @param objectId
     *     New value of the "objectId" property.
     */
    public ListOfGenericObjectIDs.Builder<_B> withObjectId(String... objectId) {
      withObjectId(Arrays.asList(objectId));
      return this;
    }

    @Override
    public ListOfGenericObjectIDs build() {
      if (_storedValue == null) {
        return this.init(new ListOfGenericObjectIDs());
      } else {
        return ((ListOfGenericObjectIDs) _storedValue);
      }
    }

    public ListOfGenericObjectIDs.Builder<_B> copyOf(final ListOfGenericObjectIDs _other) {
      _other.copyTo(this);
      return this;
    }

    public ListOfGenericObjectIDs.Builder<_B> copyOf(final ListOfGenericObjectIDs.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends ListOfGenericObjectIDs.Selector<ListOfGenericObjectIDs.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ListOfGenericObjectIDs.Select _root() {
      return new ListOfGenericObjectIDs.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ListOfGenericObjectIDs.Selector<TRoot, TParent>> objectId = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.objectId != null) {
        products.put("objectId", this.objectId.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ListOfGenericObjectIDs.Selector<TRoot, TParent>> objectId() {
      return (
        (this.objectId == null)
          ? this.objectId = new com.kscs.util.jaxb.Selector<>(this._root, this, "objectId")
          : this.objectId
      );
    }
  }
}
