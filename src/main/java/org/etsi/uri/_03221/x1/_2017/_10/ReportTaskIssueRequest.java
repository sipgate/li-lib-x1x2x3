//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.xml.datatype.XMLGregorianCalendar;
import org.w3._2001.xmlschema.Adapter1;

/**
 * <p>Java class for ReportTaskIssueRequest complex type</p>.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 *
 * <pre>{@code
 * <complexType name="ReportTaskIssueRequest">
 *   <complexContent>
 *     <extension base="{http://uri.etsi.org/03221/X1/2017/10}X1RequestMessage">
 *       <sequence>
 *         <element name="xId" type="{http://uri.etsi.org/03221/X1/2017/10}XId"/>
 *         <element name="taskReportType" type="{http://uri.etsi.org/03221/X1/2017/10}TaskReportType"/>
 *         <element name="taskIssueErrorCode" type="{http://www.w3.org/2001/XMLSchema}integer" minOccurs="0"/>
 *         <element name="taskIssueDetails" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="taskIssueExtensions" type="{http://uri.etsi.org/03221/X1/2017/10}TaskIssueExtensions" maxOccurs="unbounded" minOccurs="0"/>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
  name = "ReportTaskIssueRequest",
  propOrder = { "xId", "taskReportType", "taskIssueErrorCode", "taskIssueDetails", "taskIssueExtensions" }
)
public class ReportTaskIssueRequest extends X1RequestMessage implements Copyable {

  @XmlElement(required = true)
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "token")
  protected String xId;

  @XmlElement(required = true)
  @XmlSchemaType(name = "string")
  protected TaskReportType taskReportType;

  @XmlElement(type = String.class)
  @XmlJavaTypeAdapter(Adapter1.class)
  @XmlSchemaType(name = "integer")
  protected Long taskIssueErrorCode;

  protected String taskIssueDetails;
  protected List<TaskIssueExtensions> taskIssueExtensions;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ReportTaskIssueRequest() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ReportTaskIssueRequest copying the state of another ReportTaskIssueRequest
   *
   * @param _other
   *     The original ReportTaskIssueRequest from which to copy state.
   */
  public ReportTaskIssueRequest(final ReportTaskIssueRequest _other) {
    super(_other);
    this.xId = _other.xId;
    this.taskReportType = _other.taskReportType;
    this.taskIssueErrorCode = _other.taskIssueErrorCode;
    this.taskIssueDetails = _other.taskIssueDetails;
    if (_other.taskIssueExtensions == null) {
      this.taskIssueExtensions = null;
    } else {
      this.taskIssueExtensions = new ArrayList<>();
      for (TaskIssueExtensions _item : _other.taskIssueExtensions) {
        this.taskIssueExtensions.add(((_item == null) ? null : _item.createCopy()));
      }
    }
  }

  /**
   * Gets the value of the xId property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getXId() {
    return xId;
  }

  /**
   * Sets the value of the xId property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setXId(String value) {
    this.xId = value;
  }

  /**
   * Gets the value of the taskReportType property.
   *
   * @return
   *     possible object is
   *     {@link TaskReportType }
   *
   */
  public TaskReportType getTaskReportType() {
    return taskReportType;
  }

  /**
   * Sets the value of the taskReportType property.
   *
   * @param value
   *     allowed object is
   *     {@link TaskReportType }
   *
   */
  public void setTaskReportType(TaskReportType value) {
    this.taskReportType = value;
  }

  /**
   * Gets the value of the taskIssueErrorCode property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public Long getTaskIssueErrorCode() {
    return taskIssueErrorCode;
  }

  /**
   * Sets the value of the taskIssueErrorCode property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setTaskIssueErrorCode(Long value) {
    this.taskIssueErrorCode = value;
  }

  /**
   * Gets the value of the taskIssueDetails property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getTaskIssueDetails() {
    return taskIssueDetails;
  }

  /**
   * Sets the value of the taskIssueDetails property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setTaskIssueDetails(String value) {
    this.taskIssueDetails = value;
  }

  /**
   * Gets the value of the taskIssueExtensions property.
   *
   * <p>This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the JAXB object.
   * This is why there is not a <CODE>set</CODE> method for the taskIssueExtensions property.</p>
   *
   * <p>
   * For example, to add a new item, do as follows:
   * </p>
   * <pre>
   * getTaskIssueExtensions().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link TaskIssueExtensions }
   * </p>
   *
   *
   * @return
   *     The value of the taskIssueExtensions property.
   */
  public List<TaskIssueExtensions> getTaskIssueExtensions() {
    if (taskIssueExtensions == null) {
      taskIssueExtensions = new ArrayList<>();
    }
    return this.taskIssueExtensions;
  }

  @Override
  public ReportTaskIssueRequest createCopy() {
    final ReportTaskIssueRequest _newObject = ((ReportTaskIssueRequest) super.createCopy());
    _newObject.xId = this.xId;
    _newObject.taskReportType = this.taskReportType;
    _newObject.taskIssueErrorCode = this.taskIssueErrorCode;
    _newObject.taskIssueDetails = this.taskIssueDetails;
    if (this.taskIssueExtensions == null) {
      _newObject.taskIssueExtensions = null;
    } else {
      _newObject.taskIssueExtensions = new ArrayList<>();
      for (TaskIssueExtensions _item : this.taskIssueExtensions) {
        _newObject.taskIssueExtensions.add(((_item == null) ? null : _item.createCopy()));
      }
    }
    return _newObject;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ReportTaskIssueRequest.Builder<_B> _other) {
    super.copyTo(_other);
    _other.xId = this.xId;
    _other.taskReportType = this.taskReportType;
    _other.taskIssueErrorCode = this.taskIssueErrorCode;
    _other.taskIssueDetails = this.taskIssueDetails;
    if (this.taskIssueExtensions == null) {
      _other.taskIssueExtensions = null;
    } else {
      _other.taskIssueExtensions = new ArrayList<>();
      for (TaskIssueExtensions _item : this.taskIssueExtensions) {
        _other.taskIssueExtensions.add(((_item == null) ? null : _item.newCopyBuilder(_other)));
      }
    }
  }

  @Override
  public <_B> ReportTaskIssueRequest.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ReportTaskIssueRequest.Builder<_B>(_parentBuilder, this, true);
  }

  @Override
  public ReportTaskIssueRequest.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ReportTaskIssueRequest.Builder<Void> builder() {
    return new ReportTaskIssueRequest.Builder<>(null, null, false);
  }

  public static <_B> ReportTaskIssueRequest.Builder<_B> copyOf(final X1RequestMessage _other) {
    final ReportTaskIssueRequest.Builder<_B> _newBuilder = new ReportTaskIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  public static <_B> ReportTaskIssueRequest.Builder<_B> copyOf(final ReportTaskIssueRequest _other) {
    final ReportTaskIssueRequest.Builder<_B> _newBuilder = new ReportTaskIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ReportTaskIssueRequest.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super.copyTo(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree xIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("xId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (xIdPropertyTree != null)
          : ((xIdPropertyTree == null) || (!xIdPropertyTree.isLeaf())))
    ) {
      _other.xId = this.xId;
    }
    final PropertyTree taskReportTypePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("taskReportType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (taskReportTypePropertyTree != null)
          : ((taskReportTypePropertyTree == null) || (!taskReportTypePropertyTree.isLeaf())))
    ) {
      _other.taskReportType = this.taskReportType;
    }
    final PropertyTree taskIssueErrorCodePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("taskIssueErrorCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (taskIssueErrorCodePropertyTree != null)
          : ((taskIssueErrorCodePropertyTree == null) || (!taskIssueErrorCodePropertyTree.isLeaf())))
    ) {
      _other.taskIssueErrorCode = this.taskIssueErrorCode;
    }
    final PropertyTree taskIssueDetailsPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("taskIssueDetails"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (taskIssueDetailsPropertyTree != null)
          : ((taskIssueDetailsPropertyTree == null) || (!taskIssueDetailsPropertyTree.isLeaf())))
    ) {
      _other.taskIssueDetails = this.taskIssueDetails;
    }
    final PropertyTree taskIssueExtensionsPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("taskIssueExtensions"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (taskIssueExtensionsPropertyTree != null)
          : ((taskIssueExtensionsPropertyTree == null) || (!taskIssueExtensionsPropertyTree.isLeaf())))
    ) {
      if (this.taskIssueExtensions == null) {
        _other.taskIssueExtensions = null;
      } else {
        _other.taskIssueExtensions = new ArrayList<>();
        for (TaskIssueExtensions _item : this.taskIssueExtensions) {
          _other.taskIssueExtensions.add(
            ((_item == null) ? null : _item.newCopyBuilder(_other, taskIssueExtensionsPropertyTree, _propertyTreeUse))
          );
        }
      }
    }
  }

  @Override
  public <_B> ReportTaskIssueRequest.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ReportTaskIssueRequest.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  @Override
  public ReportTaskIssueRequest.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ReportTaskIssueRequest.Builder<_B> copyOf(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ReportTaskIssueRequest.Builder<_B> _newBuilder = new ReportTaskIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static <_B> ReportTaskIssueRequest.Builder<_B> copyOf(
    final ReportTaskIssueRequest _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ReportTaskIssueRequest.Builder<_B> _newBuilder = new ReportTaskIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ReportTaskIssueRequest.Builder<Void> copyExcept(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ReportTaskIssueRequest.Builder<Void> copyExcept(
    final ReportTaskIssueRequest _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ReportTaskIssueRequest.Builder<Void> copyOnly(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static ReportTaskIssueRequest.Builder<Void> copyOnly(
    final ReportTaskIssueRequest _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> extends X1RequestMessage.Builder<_B> implements Buildable {

    private String xId;
    private TaskReportType taskReportType;
    private Long taskIssueErrorCode;
    private String taskIssueDetails;
    private List<TaskIssueExtensions.Builder<ReportTaskIssueRequest.Builder<_B>>> taskIssueExtensions;

    public Builder(final _B _parentBuilder, final ReportTaskIssueRequest _other, final boolean _copy) {
      super(_parentBuilder, _other, _copy);
      if (_other != null) {
        this.xId = _other.xId;
        this.taskReportType = _other.taskReportType;
        this.taskIssueErrorCode = _other.taskIssueErrorCode;
        this.taskIssueDetails = _other.taskIssueDetails;
        if (_other.taskIssueExtensions == null) {
          this.taskIssueExtensions = null;
        } else {
          this.taskIssueExtensions = new ArrayList<>();
          for (TaskIssueExtensions _item : _other.taskIssueExtensions) {
            this.taskIssueExtensions.add(((_item == null) ? null : _item.newCopyBuilder(this)));
          }
        }
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ReportTaskIssueRequest _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
      if (_other != null) {
        final PropertyTree xIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("xId"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (xIdPropertyTree != null)
              : ((xIdPropertyTree == null) || (!xIdPropertyTree.isLeaf())))
        ) {
          this.xId = _other.xId;
        }
        final PropertyTree taskReportTypePropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("taskReportType"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (taskReportTypePropertyTree != null)
              : ((taskReportTypePropertyTree == null) || (!taskReportTypePropertyTree.isLeaf())))
        ) {
          this.taskReportType = _other.taskReportType;
        }
        final PropertyTree taskIssueErrorCodePropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("taskIssueErrorCode"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (taskIssueErrorCodePropertyTree != null)
              : ((taskIssueErrorCodePropertyTree == null) || (!taskIssueErrorCodePropertyTree.isLeaf())))
        ) {
          this.taskIssueErrorCode = _other.taskIssueErrorCode;
        }
        final PropertyTree taskIssueDetailsPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("taskIssueDetails"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (taskIssueDetailsPropertyTree != null)
              : ((taskIssueDetailsPropertyTree == null) || (!taskIssueDetailsPropertyTree.isLeaf())))
        ) {
          this.taskIssueDetails = _other.taskIssueDetails;
        }
        final PropertyTree taskIssueExtensionsPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("taskIssueExtensions"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (taskIssueExtensionsPropertyTree != null)
              : ((taskIssueExtensionsPropertyTree == null) || (!taskIssueExtensionsPropertyTree.isLeaf())))
        ) {
          if (_other.taskIssueExtensions == null) {
            this.taskIssueExtensions = null;
          } else {
            this.taskIssueExtensions = new ArrayList<>();
            for (TaskIssueExtensions _item : _other.taskIssueExtensions) {
              this.taskIssueExtensions.add(
                  ((_item == null)
                      ? null
                      : _item.newCopyBuilder(this, taskIssueExtensionsPropertyTree, _propertyTreeUse))
                );
            }
          }
        }
      }
    }

    protected <_P extends ReportTaskIssueRequest> _P init(final _P _product) {
      _product.xId = this.xId;
      _product.taskReportType = this.taskReportType;
      _product.taskIssueErrorCode = this.taskIssueErrorCode;
      _product.taskIssueDetails = this.taskIssueDetails;
      if (this.taskIssueExtensions != null) {
        final List<TaskIssueExtensions> taskIssueExtensions = new ArrayList<>(this.taskIssueExtensions.size());
        for (TaskIssueExtensions.Builder<ReportTaskIssueRequest.Builder<_B>> _item : this.taskIssueExtensions) {
          taskIssueExtensions.add(_item.build());
        }
        _product.taskIssueExtensions = taskIssueExtensions;
      }
      return super.init(_product);
    }

    /**
     * Sets the new value of "xId" (any previous value will be replaced)
     *
     * @param xId
     *     New value of the "xId" property.
     */
    public ReportTaskIssueRequest.Builder<_B> withXId(final String xId) {
      this.xId = xId;
      return this;
    }

    /**
     * Sets the new value of "taskReportType" (any previous value will be replaced)
     *
     * @param taskReportType
     *     New value of the "taskReportType" property.
     */
    public ReportTaskIssueRequest.Builder<_B> withTaskReportType(final TaskReportType taskReportType) {
      this.taskReportType = taskReportType;
      return this;
    }

    /**
     * Sets the new value of "taskIssueErrorCode" (any previous value will be replaced)
     *
     * @param taskIssueErrorCode
     *     New value of the "taskIssueErrorCode" property.
     */
    public ReportTaskIssueRequest.Builder<_B> withTaskIssueErrorCode(final Long taskIssueErrorCode) {
      this.taskIssueErrorCode = taskIssueErrorCode;
      return this;
    }

    /**
     * Sets the new value of "taskIssueDetails" (any previous value will be replaced)
     *
     * @param taskIssueDetails
     *     New value of the "taskIssueDetails" property.
     */
    public ReportTaskIssueRequest.Builder<_B> withTaskIssueDetails(final String taskIssueDetails) {
      this.taskIssueDetails = taskIssueDetails;
      return this;
    }

    /**
     * Adds the given items to the value of "taskIssueExtensions"
     *
     * @param taskIssueExtensions
     *     Items to add to the value of the "taskIssueExtensions" property
     */
    public ReportTaskIssueRequest.Builder<_B> addTaskIssueExtensions(
      final Iterable<? extends TaskIssueExtensions> taskIssueExtensions
    ) {
      if (taskIssueExtensions != null) {
        if (this.taskIssueExtensions == null) {
          this.taskIssueExtensions = new ArrayList<>();
        }
        for (TaskIssueExtensions _item : taskIssueExtensions) {
          this.taskIssueExtensions.add(new TaskIssueExtensions.Builder<>(this, _item, false));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "taskIssueExtensions" (any previous value will be
     * replaced)
     *
     * @param taskIssueExtensions
     *     New value of the "taskIssueExtensions" property.
     */
    public ReportTaskIssueRequest.Builder<_B> withTaskIssueExtensions(
      final Iterable<? extends TaskIssueExtensions> taskIssueExtensions
    ) {
      if (this.taskIssueExtensions != null) {
        this.taskIssueExtensions.clear();
      }
      return addTaskIssueExtensions(taskIssueExtensions);
    }

    /**
     * Adds the given items to the value of "taskIssueExtensions"
     *
     * @param taskIssueExtensions
     *     Items to add to the value of the "taskIssueExtensions" property
     */
    public ReportTaskIssueRequest.Builder<_B> addTaskIssueExtensions(TaskIssueExtensions... taskIssueExtensions) {
      addTaskIssueExtensions(Arrays.asList(taskIssueExtensions));
      return this;
    }

    /**
     * Sets the new value of "taskIssueExtensions" (any previous value will be
     * replaced)
     *
     * @param taskIssueExtensions
     *     New value of the "taskIssueExtensions" property.
     */
    public ReportTaskIssueRequest.Builder<_B> withTaskIssueExtensions(TaskIssueExtensions... taskIssueExtensions) {
      withTaskIssueExtensions(Arrays.asList(taskIssueExtensions));
      return this;
    }

    /**
     * Returns a new builder to build an additional value of the "TaskIssueExtensions"
     * property.
     * Use {@link org.etsi.uri._03221.x1._2017._10.TaskIssueExtensions.Builder#end()}
     * to return to the current builder.
     *
     * @return
     *     a new builder to build an additional value of the "TaskIssueExtensions"
     *     property.
     *     Use {@link org.etsi.uri._03221.x1._2017._10.TaskIssueExtensions.Builder#end()}
     *     to return to the current builder.
     */
    public TaskIssueExtensions.Builder<? extends ReportTaskIssueRequest.Builder<_B>> addTaskIssueExtensions() {
      if (this.taskIssueExtensions == null) {
        this.taskIssueExtensions = new ArrayList<>();
      }
      final TaskIssueExtensions.Builder<ReportTaskIssueRequest.Builder<_B>> taskIssueExtensions_Builder =
        new TaskIssueExtensions.Builder<>(this, null, false);
      this.taskIssueExtensions.add(taskIssueExtensions_Builder);
      return taskIssueExtensions_Builder;
    }

    /**
     * Sets the new value of "admfIdentifier" (any previous value will be replaced)
     *
     * @param admfIdentifier
     *     New value of the "admfIdentifier" property.
     */
    @Override
    public ReportTaskIssueRequest.Builder<_B> withAdmfIdentifier(final String admfIdentifier) {
      super.withAdmfIdentifier(admfIdentifier);
      return this;
    }

    /**
     * Sets the new value of "neIdentifier" (any previous value will be replaced)
     *
     * @param neIdentifier
     *     New value of the "neIdentifier" property.
     */
    @Override
    public ReportTaskIssueRequest.Builder<_B> withNeIdentifier(final String neIdentifier) {
      super.withNeIdentifier(neIdentifier);
      return this;
    }

    /**
     * Sets the new value of "messageTimestamp" (any previous value will be replaced)
     *
     * @param messageTimestamp
     *     New value of the "messageTimestamp" property.
     */
    @Override
    public ReportTaskIssueRequest.Builder<_B> withMessageTimestamp(final XMLGregorianCalendar messageTimestamp) {
      super.withMessageTimestamp(messageTimestamp);
      return this;
    }

    /**
     * Sets the new value of "version" (any previous value will be replaced)
     *
     * @param version
     *     New value of the "version" property.
     */
    @Override
    public ReportTaskIssueRequest.Builder<_B> withVersion(final String version) {
      super.withVersion(version);
      return this;
    }

    /**
     * Sets the new value of "x1TransactionId" (any previous value will be replaced)
     *
     * @param x1TransactionId
     *     New value of the "x1TransactionId" property.
     */
    @Override
    public ReportTaskIssueRequest.Builder<_B> withX1TransactionId(final String x1TransactionId) {
      super.withX1TransactionId(x1TransactionId);
      return this;
    }

    @Override
    public ReportTaskIssueRequest build() {
      if (_storedValue == null) {
        return this.init(new ReportTaskIssueRequest());
      } else {
        return ((ReportTaskIssueRequest) _storedValue);
      }
    }

    public ReportTaskIssueRequest.Builder<_B> copyOf(final ReportTaskIssueRequest _other) {
      _other.copyTo(this);
      return this;
    }

    public ReportTaskIssueRequest.Builder<_B> copyOf(final ReportTaskIssueRequest.Builder _other) {
      return copyOf(_other.build());
    }
  }
}
