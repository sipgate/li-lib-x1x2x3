//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlType;

/**
 * <p>Java class for LocationTypeOptions complex type</p>.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 *
 * <pre>{@code
 * <complexType name="LocationTypeOptions">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <choice>
 *         <element name="doNotReport" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         <element name="listOfLocationTypes" type="{http://uri.etsi.org/03221/X1/2017/10}ListOfLocationTypes"/>
 *       </choice>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LocationTypeOptions", propOrder = { "doNotReport", "listOfLocationTypes" })
public class LocationTypeOptions implements Copyable {

  protected String doNotReport;
  protected ListOfLocationTypes listOfLocationTypes;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public LocationTypeOptions() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a LocationTypeOptions copying the state of another LocationTypeOptions
   *
   * @param _other
   *     The original LocationTypeOptions from which to copy state.
   */
  public LocationTypeOptions(final LocationTypeOptions _other) {
    this.doNotReport = _other.doNotReport;
    this.listOfLocationTypes = ((_other.listOfLocationTypes == null) ? null : _other.listOfLocationTypes.createCopy());
  }

  /**
   * Gets the value of the doNotReport property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getDoNotReport() {
    return doNotReport;
  }

  /**
   * Sets the value of the doNotReport property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setDoNotReport(String value) {
    this.doNotReport = value;
  }

  /**
   * Gets the value of the listOfLocationTypes property.
   *
   * @return
   *     possible object is
   *     {@link ListOfLocationTypes }
   *
   */
  public ListOfLocationTypes getListOfLocationTypes() {
    return listOfLocationTypes;
  }

  /**
   * Sets the value of the listOfLocationTypes property.
   *
   * @param value
   *     allowed object is
   *     {@link ListOfLocationTypes }
   *
   */
  public void setListOfLocationTypes(ListOfLocationTypes value) {
    this.listOfLocationTypes = value;
  }

  @Override
  public LocationTypeOptions createCopy() {
    final LocationTypeOptions _newObject;
    try {
      _newObject = ((LocationTypeOptions) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.doNotReport = this.doNotReport;
    _newObject.listOfLocationTypes = ((this.listOfLocationTypes == null)
        ? null
        : this.listOfLocationTypes.createCopy());
    return _newObject;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final LocationTypeOptions.Builder<_B> _other) {
    _other.doNotReport = this.doNotReport;
    _other.listOfLocationTypes = ((this.listOfLocationTypes == null)
        ? null
        : this.listOfLocationTypes.newCopyBuilder(_other));
  }

  public <_B> LocationTypeOptions.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new LocationTypeOptions.Builder<_B>(_parentBuilder, this, true);
  }

  public LocationTypeOptions.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static LocationTypeOptions.Builder<Void> builder() {
    return new LocationTypeOptions.Builder<>(null, null, false);
  }

  public static <_B> LocationTypeOptions.Builder<_B> copyOf(final LocationTypeOptions _other) {
    final LocationTypeOptions.Builder<_B> _newBuilder = new LocationTypeOptions.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final LocationTypeOptions.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree doNotReportPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("doNotReport"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (doNotReportPropertyTree != null)
          : ((doNotReportPropertyTree == null) || (!doNotReportPropertyTree.isLeaf())))
    ) {
      _other.doNotReport = this.doNotReport;
    }
    final PropertyTree listOfLocationTypesPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("listOfLocationTypes"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (listOfLocationTypesPropertyTree != null)
          : ((listOfLocationTypesPropertyTree == null) || (!listOfLocationTypesPropertyTree.isLeaf())))
    ) {
      _other.listOfLocationTypes = ((this.listOfLocationTypes == null)
          ? null
          : this.listOfLocationTypes.newCopyBuilder(_other, listOfLocationTypesPropertyTree, _propertyTreeUse));
    }
  }

  public <_B> LocationTypeOptions.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new LocationTypeOptions.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public LocationTypeOptions.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> LocationTypeOptions.Builder<_B> copyOf(
    final LocationTypeOptions _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final LocationTypeOptions.Builder<_B> _newBuilder = new LocationTypeOptions.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static LocationTypeOptions.Builder<Void> copyExcept(
    final LocationTypeOptions _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static LocationTypeOptions.Builder<Void> copyOnly(
    final LocationTypeOptions _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final LocationTypeOptions _storedValue;
    private String doNotReport;
    private ListOfLocationTypes.Builder<LocationTypeOptions.Builder<_B>> listOfLocationTypes;

    public Builder(final _B _parentBuilder, final LocationTypeOptions _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          this.doNotReport = _other.doNotReport;
          this.listOfLocationTypes = ((_other.listOfLocationTypes == null)
              ? null
              : _other.listOfLocationTypes.newCopyBuilder(this));
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final LocationTypeOptions _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree doNotReportPropertyTree =
            ((_propertyTree == null) ? null : _propertyTree.get("doNotReport"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (doNotReportPropertyTree != null)
                : ((doNotReportPropertyTree == null) || (!doNotReportPropertyTree.isLeaf())))
          ) {
            this.doNotReport = _other.doNotReport;
          }
          final PropertyTree listOfLocationTypesPropertyTree =
            ((_propertyTree == null) ? null : _propertyTree.get("listOfLocationTypes"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (listOfLocationTypesPropertyTree != null)
                : ((listOfLocationTypesPropertyTree == null) || (!listOfLocationTypesPropertyTree.isLeaf())))
          ) {
            this.listOfLocationTypes = ((_other.listOfLocationTypes == null)
                ? null
                : _other.listOfLocationTypes.newCopyBuilder(this, listOfLocationTypesPropertyTree, _propertyTreeUse));
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends LocationTypeOptions> _P init(final _P _product) {
      _product.doNotReport = this.doNotReport;
      _product.listOfLocationTypes = ((this.listOfLocationTypes == null) ? null : this.listOfLocationTypes.build());
      return _product;
    }

    /**
     * Sets the new value of "doNotReport" (any previous value will be replaced)
     *
     * @param doNotReport
     *     New value of the "doNotReport" property.
     */
    public LocationTypeOptions.Builder<_B> withDoNotReport(final String doNotReport) {
      this.doNotReport = doNotReport;
      return this;
    }

    /**
     * Sets the new value of "listOfLocationTypes" (any previous value will be
     * replaced)
     *
     * @param listOfLocationTypes
     *     New value of the "listOfLocationTypes" property.
     */
    public LocationTypeOptions.Builder<_B> withListOfLocationTypes(final ListOfLocationTypes listOfLocationTypes) {
      this.listOfLocationTypes = ((listOfLocationTypes == null)
          ? null
          : new ListOfLocationTypes.Builder<>(this, listOfLocationTypes, false));
      return this;
    }

    /**
     * Returns the existing builder or a new builder to build the value of the
     * "listOfLocationTypes" property.
     * Use {@link org.etsi.uri._03221.x1._2017._10.ListOfLocationTypes.Builder#end()}
     * to return to the current builder.
     *
     * @return
     *     A new builder to build the value of the "listOfLocationTypes" property.
     *     Use {@link org.etsi.uri._03221.x1._2017._10.ListOfLocationTypes.Builder#end()}
     *     to return to the current builder.
     */
    public ListOfLocationTypes.Builder<? extends LocationTypeOptions.Builder<_B>> withListOfLocationTypes() {
      if (this.listOfLocationTypes != null) {
        return this.listOfLocationTypes;
      }
      return this.listOfLocationTypes = new ListOfLocationTypes.Builder<>(this, null, false);
    }

    @Override
    public LocationTypeOptions build() {
      if (_storedValue == null) {
        return this.init(new LocationTypeOptions());
      } else {
        return ((LocationTypeOptions) _storedValue);
      }
    }

    public LocationTypeOptions.Builder<_B> copyOf(final LocationTypeOptions _other) {
      _other.copyTo(this);
      return this;
    }

    public LocationTypeOptions.Builder<_B> copyOf(final LocationTypeOptions.Builder _other) {
      return copyOf(_other.build());
    }
  }
}
