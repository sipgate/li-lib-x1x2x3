//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10.hashedid;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.HexBinaryAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.etsi.uri._03221.x1._2017._10.GenericObject;

/**
 * <p>Java class for HashContext complex type</p>.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 *
 * <pre>{@code
 * <complexType name="HashContext">
 *   <complexContent>
 *     <extension base="{http://uri.etsi.org/03221/X1/2017/10}GenericObject">
 *       <sequence>
 *         <element name="hashAlgorithm" type="{http://uri.etsi.org/03221/X1/2017/10/HashedID}HashAlgorithm"/>
 *         <element name="salt" type="{http://uri.etsi.org/03221/X1/2017/10/HashedID}Salt"/>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HashContext", propOrder = { "hashAlgorithm", "salt" })
public class HashContext extends GenericObject implements Copyable {

  @XmlElement(required = true)
  @XmlSchemaType(name = "string")
  protected HashAlgorithm hashAlgorithm;

  @XmlElement(required = true, type = String.class)
  @XmlJavaTypeAdapter(HexBinaryAdapter.class)
  @XmlSchemaType(name = "hexBinary")
  protected byte[] salt;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public HashContext() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a HashContext copying the state of another HashContext
   *
   * @param _other
   *     The original HashContext from which to copy state.
   */
  public HashContext(final HashContext _other) {
    super(_other);
    this.hashAlgorithm = _other.hashAlgorithm;
    this.salt = _other.salt;
  }

  /**
   * Gets the value of the hashAlgorithm property.
   *
   * @return
   *     possible object is
   *     {@link HashAlgorithm }
   *
   */
  public HashAlgorithm getHashAlgorithm() {
    return hashAlgorithm;
  }

  /**
   * Sets the value of the hashAlgorithm property.
   *
   * @param value
   *     allowed object is
   *     {@link HashAlgorithm }
   *
   */
  public void setHashAlgorithm(HashAlgorithm value) {
    this.hashAlgorithm = value;
  }

  /**
   * Gets the value of the salt property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public byte[] getSalt() {
    return salt;
  }

  /**
   * Sets the value of the salt property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setSalt(byte[] value) {
    this.salt = value;
  }

  @Override
  public HashContext createCopy() {
    final HashContext _newObject = ((HashContext) super.createCopy());
    _newObject.hashAlgorithm = this.hashAlgorithm;
    _newObject.salt = this.salt;
    return _newObject;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final HashContext.Builder<_B> _other) {
    super.copyTo(_other);
    _other.hashAlgorithm = this.hashAlgorithm;
    _other.salt = this.salt;
  }

  @Override
  public <_B> HashContext.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new HashContext.Builder<_B>(_parentBuilder, this, true);
  }

  @Override
  public HashContext.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static HashContext.Builder<Void> builder() {
    return new HashContext.Builder<>(null, null, false);
  }

  public static <_B> HashContext.Builder<_B> copyOf(final GenericObject _other) {
    final HashContext.Builder<_B> _newBuilder = new HashContext.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  public static <_B> HashContext.Builder<_B> copyOf(final HashContext _other) {
    final HashContext.Builder<_B> _newBuilder = new HashContext.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final HashContext.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super.copyTo(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree hashAlgorithmPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("hashAlgorithm"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (hashAlgorithmPropertyTree != null)
          : ((hashAlgorithmPropertyTree == null) || (!hashAlgorithmPropertyTree.isLeaf())))
    ) {
      _other.hashAlgorithm = this.hashAlgorithm;
    }
    final PropertyTree saltPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("salt"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (saltPropertyTree != null)
          : ((saltPropertyTree == null) || (!saltPropertyTree.isLeaf())))
    ) {
      _other.salt = this.salt;
    }
  }

  @Override
  public <_B> HashContext.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new HashContext.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  @Override
  public HashContext.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> HashContext.Builder<_B> copyOf(
    final GenericObject _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final HashContext.Builder<_B> _newBuilder = new HashContext.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static <_B> HashContext.Builder<_B> copyOf(
    final HashContext _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final HashContext.Builder<_B> _newBuilder = new HashContext.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static HashContext.Builder<Void> copyExcept(final GenericObject _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static HashContext.Builder<Void> copyExcept(final HashContext _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static HashContext.Builder<Void> copyOnly(final GenericObject _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static HashContext.Builder<Void> copyOnly(final HashContext _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> extends GenericObject.Builder<_B> implements Buildable {

    private HashAlgorithm hashAlgorithm;
    private byte[] salt;

    public Builder(final _B _parentBuilder, final HashContext _other, final boolean _copy) {
      super(_parentBuilder, _other, _copy);
      if (_other != null) {
        this.hashAlgorithm = _other.hashAlgorithm;
        this.salt = _other.salt;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final HashContext _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
      if (_other != null) {
        final PropertyTree hashAlgorithmPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("hashAlgorithm"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (hashAlgorithmPropertyTree != null)
              : ((hashAlgorithmPropertyTree == null) || (!hashAlgorithmPropertyTree.isLeaf())))
        ) {
          this.hashAlgorithm = _other.hashAlgorithm;
        }
        final PropertyTree saltPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("salt"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (saltPropertyTree != null)
              : ((saltPropertyTree == null) || (!saltPropertyTree.isLeaf())))
        ) {
          this.salt = _other.salt;
        }
      }
    }

    protected <_P extends HashContext> _P init(final _P _product) {
      _product.hashAlgorithm = this.hashAlgorithm;
      _product.salt = this.salt;
      return super.init(_product);
    }

    /**
     * Sets the new value of "hashAlgorithm" (any previous value will be replaced)
     *
     * @param hashAlgorithm
     *     New value of the "hashAlgorithm" property.
     */
    public HashContext.Builder<_B> withHashAlgorithm(final HashAlgorithm hashAlgorithm) {
      this.hashAlgorithm = hashAlgorithm;
      return this;
    }

    /**
     * Sets the new value of "salt" (any previous value will be replaced)
     *
     * @param salt
     *     New value of the "salt" property.
     */
    public HashContext.Builder<_B> withSalt(final byte[] salt) {
      this.salt = salt;
      return this;
    }

    /**
     * Sets the new value of "objectId" (any previous value will be replaced)
     *
     * @param objectId
     *     New value of the "objectId" property.
     */
    @Override
    public HashContext.Builder<_B> withObjectId(final String objectId) {
      super.withObjectId(objectId);
      return this;
    }

    @Override
    public HashContext build() {
      if (_storedValue == null) {
        return this.init(new HashContext());
      } else {
        return ((HashContext) _storedValue);
      }
    }

    public HashContext.Builder<_B> copyOf(final HashContext _other) {
      _other.copyTo(this);
      return this;
    }

    public HashContext.Builder<_B> copyOf(final HashContext.Builder _other) {
      return copyOf(_other.build());
    }
  }
}
