//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

/*
 * SPDX-License-Identifier: MIT
 */
package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.datatype.XMLGregorianCalendar;
import org.w3._2001.xmlschema.Adapter1;

/**
 * <p>Java class for ReportNEIssueRequest complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ReportNEIssueRequest">
 *   <complexContent>
 *     <extension base="{http://uri.etsi.org/03221/X1/2017/10}X1RequestMessage">
 *       <sequence>
 *         <element name="typeOfNeIssueMessage" type="{http://uri.etsi.org/03221/X1/2017/10}TypeOfNeIssueMessage"/>
 *         <element name="description" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         <element name="issueCode" type="{http://www.w3.org/2001/XMLSchema}integer" minOccurs="0"/>
 *         <element name="nEIssueExtensions" type="{http://uri.etsi.org/03221/X1/2017/10}NEIssueExtensions" maxOccurs="unbounded" minOccurs="0"/>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
  name = "ReportNEIssueRequest",
  propOrder = { "typeOfNeIssueMessage", "description", "issueCode", "neIssueExtensions" }
)
public class ReportNEIssueRequest extends X1RequestMessage implements Copyable, PartialCopyable {

  @XmlElement(required = true)
  @XmlSchemaType(name = "string")
  protected TypeOfNeIssueMessage typeOfNeIssueMessage;

  @XmlElement(required = true)
  protected String description;

  @XmlElement(type = String.class)
  @XmlJavaTypeAdapter(Adapter1.class)
  @XmlSchemaType(name = "integer")
  protected Long issueCode;

  @XmlElement(name = "nEIssueExtensions")
  protected List<NEIssueExtensions> neIssueExtensions;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ReportNEIssueRequest() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ReportNEIssueRequest copying the state of another ReportNEIssueRequest
   *
   * @param _other
   *     The original ReportNEIssueRequest from which to copy state.
   */
  public ReportNEIssueRequest(final ReportNEIssueRequest _other) {
    super(_other);
    this.typeOfNeIssueMessage = _other.typeOfNeIssueMessage;
    this.description = _other.description;
    this.issueCode = _other.issueCode;
    if (_other.neIssueExtensions == null) {
      this.neIssueExtensions = null;
    } else {
      this.neIssueExtensions = new ArrayList<>();
      for (NEIssueExtensions _item : _other.neIssueExtensions) {
        this.neIssueExtensions.add(((_item == null) ? null : _item.createCopy()));
      }
    }
  }

  /**
   * Instantiates a ReportNEIssueRequest copying the state of another ReportNEIssueRequest
   *
   * @param _other
   *     The original ReportNEIssueRequest from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public ReportNEIssueRequest(
    final ReportNEIssueRequest _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree typeOfNeIssueMessagePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("typeOfNeIssueMessage"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (typeOfNeIssueMessagePropertyTree != null)
          : ((typeOfNeIssueMessagePropertyTree == null) || (!typeOfNeIssueMessagePropertyTree.isLeaf())))
    ) {
      this.typeOfNeIssueMessage = _other.typeOfNeIssueMessage;
    }
    final PropertyTree descriptionPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("description"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (descriptionPropertyTree != null)
          : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))
    ) {
      this.description = _other.description;
    }
    final PropertyTree issueCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("issueCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (issueCodePropertyTree != null)
          : ((issueCodePropertyTree == null) || (!issueCodePropertyTree.isLeaf())))
    ) {
      this.issueCode = _other.issueCode;
    }
    final PropertyTree neIssueExtensionsPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("neIssueExtensions"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (neIssueExtensionsPropertyTree != null)
          : ((neIssueExtensionsPropertyTree == null) || (!neIssueExtensionsPropertyTree.isLeaf())))
    ) {
      if (_other.neIssueExtensions == null) {
        this.neIssueExtensions = null;
      } else {
        this.neIssueExtensions = new ArrayList<>();
        for (NEIssueExtensions _item : _other.neIssueExtensions) {
          this.neIssueExtensions.add(
              ((_item == null) ? null : _item.createCopy(neIssueExtensionsPropertyTree, _propertyTreeUse))
            );
        }
      }
    }
  }

  /**
   * Gets the value of the typeOfNeIssueMessage property.
   *
   * @return
   *     possible object is
   *     {@link TypeOfNeIssueMessage }
   *
   */
  public TypeOfNeIssueMessage getTypeOfNeIssueMessage() {
    return typeOfNeIssueMessage;
  }

  /**
   * Sets the value of the typeOfNeIssueMessage property.
   *
   * @param value
   *     allowed object is
   *     {@link TypeOfNeIssueMessage }
   *
   */
  public void setTypeOfNeIssueMessage(TypeOfNeIssueMessage value) {
    this.typeOfNeIssueMessage = value;
  }

  /**
   * Gets the value of the description property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getDescription() {
    return description;
  }

  /**
   * Sets the value of the description property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setDescription(String value) {
    this.description = value;
  }

  /**
   * Gets the value of the issueCode property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public Long getIssueCode() {
    return issueCode;
  }

  /**
   * Sets the value of the issueCode property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setIssueCode(Long value) {
    this.issueCode = value;
  }

  /**
   * Gets the value of the neIssueExtensions property.
   *
   * <p>
   * This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the Jakarta XML Binding object.
   * This is why there is not a {@code set} method for the neIssueExtensions property.
   *
   * <p>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getNEIssueExtensions().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link NEIssueExtensions }
   *
   *
   * @return
   *     The value of the neIssueExtensions property.
   */
  public List<NEIssueExtensions> getNEIssueExtensions() {
    if (neIssueExtensions == null) {
      neIssueExtensions = new ArrayList<>();
    }
    return this.neIssueExtensions;
  }

  @Override
  public ReportNEIssueRequest createCopy() {
    final ReportNEIssueRequest _newObject = ((ReportNEIssueRequest) super.createCopy());
    _newObject.typeOfNeIssueMessage = this.typeOfNeIssueMessage;
    _newObject.description = this.description;
    _newObject.issueCode = this.issueCode;
    if (this.neIssueExtensions == null) {
      _newObject.neIssueExtensions = null;
    } else {
      _newObject.neIssueExtensions = new ArrayList<>();
      for (NEIssueExtensions _item : this.neIssueExtensions) {
        _newObject.neIssueExtensions.add(((_item == null) ? null : _item.createCopy()));
      }
    }
    return _newObject;
  }

  @Override
  public ReportNEIssueRequest createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final ReportNEIssueRequest _newObject = ((ReportNEIssueRequest) super.createCopy(_propertyTree, _propertyTreeUse));
    final PropertyTree typeOfNeIssueMessagePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("typeOfNeIssueMessage"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (typeOfNeIssueMessagePropertyTree != null)
          : ((typeOfNeIssueMessagePropertyTree == null) || (!typeOfNeIssueMessagePropertyTree.isLeaf())))
    ) {
      _newObject.typeOfNeIssueMessage = this.typeOfNeIssueMessage;
    }
    final PropertyTree descriptionPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("description"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (descriptionPropertyTree != null)
          : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))
    ) {
      _newObject.description = this.description;
    }
    final PropertyTree issueCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("issueCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (issueCodePropertyTree != null)
          : ((issueCodePropertyTree == null) || (!issueCodePropertyTree.isLeaf())))
    ) {
      _newObject.issueCode = this.issueCode;
    }
    final PropertyTree neIssueExtensionsPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("neIssueExtensions"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (neIssueExtensionsPropertyTree != null)
          : ((neIssueExtensionsPropertyTree == null) || (!neIssueExtensionsPropertyTree.isLeaf())))
    ) {
      if (this.neIssueExtensions == null) {
        _newObject.neIssueExtensions = null;
      } else {
        _newObject.neIssueExtensions = new ArrayList<>();
        for (NEIssueExtensions _item : this.neIssueExtensions) {
          _newObject.neIssueExtensions.add(
            ((_item == null) ? null : _item.createCopy(neIssueExtensionsPropertyTree, _propertyTreeUse))
          );
        }
      }
    }
    return _newObject;
  }

  @Override
  public ReportNEIssueRequest copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public ReportNEIssueRequest copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ReportNEIssueRequest.Builder<_B> _other) {
    super.copyTo(_other);
    _other.typeOfNeIssueMessage = this.typeOfNeIssueMessage;
    _other.description = this.description;
    _other.issueCode = this.issueCode;
    if (this.neIssueExtensions == null) {
      _other.neIssueExtensions = null;
    } else {
      _other.neIssueExtensions = new ArrayList<>();
      for (NEIssueExtensions _item : this.neIssueExtensions) {
        _other.neIssueExtensions.add(((_item == null) ? null : _item.newCopyBuilder(_other)));
      }
    }
  }

  @Override
  public <_B> ReportNEIssueRequest.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ReportNEIssueRequest.Builder<_B>(_parentBuilder, this, true);
  }

  @Override
  public ReportNEIssueRequest.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ReportNEIssueRequest.Builder<Void> builder() {
    return new ReportNEIssueRequest.Builder<>(null, null, false);
  }

  public static <_B> ReportNEIssueRequest.Builder<_B> copyOf(final X1RequestMessage _other) {
    final ReportNEIssueRequest.Builder<_B> _newBuilder = new ReportNEIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  public static <_B> ReportNEIssueRequest.Builder<_B> copyOf(final ReportNEIssueRequest _other) {
    final ReportNEIssueRequest.Builder<_B> _newBuilder = new ReportNEIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ReportNEIssueRequest.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super.copyTo(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree typeOfNeIssueMessagePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("typeOfNeIssueMessage"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (typeOfNeIssueMessagePropertyTree != null)
          : ((typeOfNeIssueMessagePropertyTree == null) || (!typeOfNeIssueMessagePropertyTree.isLeaf())))
    ) {
      _other.typeOfNeIssueMessage = this.typeOfNeIssueMessage;
    }
    final PropertyTree descriptionPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("description"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (descriptionPropertyTree != null)
          : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))
    ) {
      _other.description = this.description;
    }
    final PropertyTree issueCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("issueCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (issueCodePropertyTree != null)
          : ((issueCodePropertyTree == null) || (!issueCodePropertyTree.isLeaf())))
    ) {
      _other.issueCode = this.issueCode;
    }
    final PropertyTree neIssueExtensionsPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("neIssueExtensions"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (neIssueExtensionsPropertyTree != null)
          : ((neIssueExtensionsPropertyTree == null) || (!neIssueExtensionsPropertyTree.isLeaf())))
    ) {
      if (this.neIssueExtensions == null) {
        _other.neIssueExtensions = null;
      } else {
        _other.neIssueExtensions = new ArrayList<>();
        for (NEIssueExtensions _item : this.neIssueExtensions) {
          _other.neIssueExtensions.add(
            ((_item == null) ? null : _item.newCopyBuilder(_other, neIssueExtensionsPropertyTree, _propertyTreeUse))
          );
        }
      }
    }
  }

  @Override
  public <_B> ReportNEIssueRequest.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ReportNEIssueRequest.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  @Override
  public ReportNEIssueRequest.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ReportNEIssueRequest.Builder<_B> copyOf(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ReportNEIssueRequest.Builder<_B> _newBuilder = new ReportNEIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static <_B> ReportNEIssueRequest.Builder<_B> copyOf(
    final ReportNEIssueRequest _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ReportNEIssueRequest.Builder<_B> _newBuilder = new ReportNEIssueRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ReportNEIssueRequest.Builder<Void> copyExcept(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ReportNEIssueRequest.Builder<Void> copyExcept(
    final ReportNEIssueRequest _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ReportNEIssueRequest.Builder<Void> copyOnly(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static ReportNEIssueRequest.Builder<Void> copyOnly(
    final ReportNEIssueRequest _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> extends X1RequestMessage.Builder<_B> implements Buildable {

    private TypeOfNeIssueMessage typeOfNeIssueMessage;
    private String description;
    private Long issueCode;
    private List<NEIssueExtensions.Builder<ReportNEIssueRequest.Builder<_B>>> neIssueExtensions;

    public Builder(final _B _parentBuilder, final ReportNEIssueRequest _other, final boolean _copy) {
      super(_parentBuilder, _other, _copy);
      if (_other != null) {
        this.typeOfNeIssueMessage = _other.typeOfNeIssueMessage;
        this.description = _other.description;
        this.issueCode = _other.issueCode;
        if (_other.neIssueExtensions == null) {
          this.neIssueExtensions = null;
        } else {
          this.neIssueExtensions = new ArrayList<>();
          for (NEIssueExtensions _item : _other.neIssueExtensions) {
            this.neIssueExtensions.add(((_item == null) ? null : _item.newCopyBuilder(this)));
          }
        }
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ReportNEIssueRequest _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
      if (_other != null) {
        final PropertyTree typeOfNeIssueMessagePropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("typeOfNeIssueMessage"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (typeOfNeIssueMessagePropertyTree != null)
              : ((typeOfNeIssueMessagePropertyTree == null) || (!typeOfNeIssueMessagePropertyTree.isLeaf())))
        ) {
          this.typeOfNeIssueMessage = _other.typeOfNeIssueMessage;
        }
        final PropertyTree descriptionPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("description"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (descriptionPropertyTree != null)
              : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))
        ) {
          this.description = _other.description;
        }
        final PropertyTree issueCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("issueCode"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (issueCodePropertyTree != null)
              : ((issueCodePropertyTree == null) || (!issueCodePropertyTree.isLeaf())))
        ) {
          this.issueCode = _other.issueCode;
        }
        final PropertyTree neIssueExtensionsPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("neIssueExtensions"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (neIssueExtensionsPropertyTree != null)
              : ((neIssueExtensionsPropertyTree == null) || (!neIssueExtensionsPropertyTree.isLeaf())))
        ) {
          if (_other.neIssueExtensions == null) {
            this.neIssueExtensions = null;
          } else {
            this.neIssueExtensions = new ArrayList<>();
            for (NEIssueExtensions _item : _other.neIssueExtensions) {
              this.neIssueExtensions.add(
                  ((_item == null) ? null : _item.newCopyBuilder(this, neIssueExtensionsPropertyTree, _propertyTreeUse))
                );
            }
          }
        }
      }
    }

    protected <_P extends ReportNEIssueRequest> _P init(final _P _product) {
      _product.typeOfNeIssueMessage = this.typeOfNeIssueMessage;
      _product.description = this.description;
      _product.issueCode = this.issueCode;
      if (this.neIssueExtensions != null) {
        final List<NEIssueExtensions> neIssueExtensions = new ArrayList<>(this.neIssueExtensions.size());
        for (NEIssueExtensions.Builder<ReportNEIssueRequest.Builder<_B>> _item : this.neIssueExtensions) {
          neIssueExtensions.add(_item.build());
        }
        _product.neIssueExtensions = neIssueExtensions;
      }
      return super.init(_product);
    }

    /**
     * Sets the new value of "typeOfNeIssueMessage" (any previous value will be
     * replaced)
     *
     * @param typeOfNeIssueMessage
     *     New value of the "typeOfNeIssueMessage" property.
     */
    public ReportNEIssueRequest.Builder<_B> withTypeOfNeIssueMessage(final TypeOfNeIssueMessage typeOfNeIssueMessage) {
      this.typeOfNeIssueMessage = typeOfNeIssueMessage;
      return this;
    }

    /**
     * Sets the new value of "description" (any previous value will be replaced)
     *
     * @param description
     *     New value of the "description" property.
     */
    public ReportNEIssueRequest.Builder<_B> withDescription(final String description) {
      this.description = description;
      return this;
    }

    /**
     * Sets the new value of "issueCode" (any previous value will be replaced)
     *
     * @param issueCode
     *     New value of the "issueCode" property.
     */
    public ReportNEIssueRequest.Builder<_B> withIssueCode(final Long issueCode) {
      this.issueCode = issueCode;
      return this;
    }

    /**
     * Adds the given items to the value of "neIssueExtensions"
     *
     * @param neIssueExtensions
     *     Items to add to the value of the "neIssueExtensions" property
     */
    public ReportNEIssueRequest.Builder<_B> addNEIssueExtensions(
      final Iterable<? extends NEIssueExtensions> neIssueExtensions
    ) {
      if (neIssueExtensions != null) {
        if (this.neIssueExtensions == null) {
          this.neIssueExtensions = new ArrayList<>();
        }
        for (NEIssueExtensions _item : neIssueExtensions) {
          this.neIssueExtensions.add(new NEIssueExtensions.Builder<>(this, _item, false));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "neIssueExtensions" (any previous value will be replaced)
     *
     * @param neIssueExtensions
     *     New value of the "neIssueExtensions" property.
     */
    public ReportNEIssueRequest.Builder<_B> withNEIssueExtensions(
      final Iterable<? extends NEIssueExtensions> neIssueExtensions
    ) {
      if (this.neIssueExtensions != null) {
        this.neIssueExtensions.clear();
      }
      return addNEIssueExtensions(neIssueExtensions);
    }

    /**
     * Adds the given items to the value of "neIssueExtensions"
     *
     * @param neIssueExtensions
     *     Items to add to the value of the "neIssueExtensions" property
     */
    public ReportNEIssueRequest.Builder<_B> addNEIssueExtensions(NEIssueExtensions... neIssueExtensions) {
      addNEIssueExtensions(Arrays.asList(neIssueExtensions));
      return this;
    }

    /**
     * Sets the new value of "neIssueExtensions" (any previous value will be replaced)
     *
     * @param neIssueExtensions
     *     New value of the "neIssueExtensions" property.
     */
    public ReportNEIssueRequest.Builder<_B> withNEIssueExtensions(NEIssueExtensions... neIssueExtensions) {
      withNEIssueExtensions(Arrays.asList(neIssueExtensions));
      return this;
    }

    /**
     * Returns a new builder to build an additional value of the "NEIssueExtensions"
     * property.
     * Use {@link org.etsi.uri._03221.x1._2017._10.NEIssueExtensions.Builder#end()} to
     * return to the current builder.
     *
     * @return
     *     a new builder to build an additional value of the "NEIssueExtensions" property.
     *     Use {@link org.etsi.uri._03221.x1._2017._10.NEIssueExtensions.Builder#end()} to
     *     return to the current builder.
     */
    public NEIssueExtensions.Builder<? extends ReportNEIssueRequest.Builder<_B>> addNEIssueExtensions() {
      if (this.neIssueExtensions == null) {
        this.neIssueExtensions = new ArrayList<>();
      }
      final NEIssueExtensions.Builder<ReportNEIssueRequest.Builder<_B>> neIssueExtensions_Builder =
        new NEIssueExtensions.Builder<>(this, null, false);
      this.neIssueExtensions.add(neIssueExtensions_Builder);
      return neIssueExtensions_Builder;
    }

    /**
     * Sets the new value of "admfIdentifier" (any previous value will be replaced)
     *
     * @param admfIdentifier
     *     New value of the "admfIdentifier" property.
     */
    @Override
    public ReportNEIssueRequest.Builder<_B> withAdmfIdentifier(final String admfIdentifier) {
      super.withAdmfIdentifier(admfIdentifier);
      return this;
    }

    /**
     * Sets the new value of "neIdentifier" (any previous value will be replaced)
     *
     * @param neIdentifier
     *     New value of the "neIdentifier" property.
     */
    @Override
    public ReportNEIssueRequest.Builder<_B> withNeIdentifier(final String neIdentifier) {
      super.withNeIdentifier(neIdentifier);
      return this;
    }

    /**
     * Sets the new value of "messageTimestamp" (any previous value will be replaced)
     *
     * @param messageTimestamp
     *     New value of the "messageTimestamp" property.
     */
    @Override
    public ReportNEIssueRequest.Builder<_B> withMessageTimestamp(final XMLGregorianCalendar messageTimestamp) {
      super.withMessageTimestamp(messageTimestamp);
      return this;
    }

    /**
     * Sets the new value of "version" (any previous value will be replaced)
     *
     * @param version
     *     New value of the "version" property.
     */
    @Override
    public ReportNEIssueRequest.Builder<_B> withVersion(final String version) {
      super.withVersion(version);
      return this;
    }

    /**
     * Sets the new value of "x1TransactionId" (any previous value will be replaced)
     *
     * @param x1TransactionId
     *     New value of the "x1TransactionId" property.
     */
    @Override
    public ReportNEIssueRequest.Builder<_B> withX1TransactionId(final String x1TransactionId) {
      super.withX1TransactionId(x1TransactionId);
      return this;
    }

    @Override
    public ReportNEIssueRequest build() {
      if (_storedValue == null) {
        return this.init(new ReportNEIssueRequest());
      } else {
        return ((ReportNEIssueRequest) _storedValue);
      }
    }

    public ReportNEIssueRequest.Builder<_B> copyOf(final ReportNEIssueRequest _other) {
      _other.copyTo(this);
      return this;
    }

    public ReportNEIssueRequest.Builder<_B> copyOf(final ReportNEIssueRequest.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends ReportNEIssueRequest.Selector<ReportNEIssueRequest.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ReportNEIssueRequest.Select _root() {
      return new ReportNEIssueRequest.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends X1RequestMessage.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> typeOfNeIssueMessage =
      null;
    private com.kscs.util.jaxb.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> description = null;
    private com.kscs.util.jaxb.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> issueCode = null;
    private NEIssueExtensions.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> neIssueExtensions = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.typeOfNeIssueMessage != null) {
        products.put("typeOfNeIssueMessage", this.typeOfNeIssueMessage.init());
      }
      if (this.description != null) {
        products.put("description", this.description.init());
      }
      if (this.issueCode != null) {
        products.put("issueCode", this.issueCode.init());
      }
      if (this.neIssueExtensions != null) {
        products.put("neIssueExtensions", this.neIssueExtensions.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> typeOfNeIssueMessage() {
      return (
        (this.typeOfNeIssueMessage == null)
          ? this.typeOfNeIssueMessage = new com.kscs.util.jaxb.Selector<>(this._root, this, "typeOfNeIssueMessage")
          : this.typeOfNeIssueMessage
      );
    }

    public com.kscs.util.jaxb.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> description() {
      return (
        (this.description == null)
          ? this.description = new com.kscs.util.jaxb.Selector<>(this._root, this, "description")
          : this.description
      );
    }

    public com.kscs.util.jaxb.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> issueCode() {
      return (
        (this.issueCode == null)
          ? this.issueCode = new com.kscs.util.jaxb.Selector<>(this._root, this, "issueCode")
          : this.issueCode
      );
    }

    public NEIssueExtensions.Selector<TRoot, ReportNEIssueRequest.Selector<TRoot, TParent>> neIssueExtensions() {
      return (
        (this.neIssueExtensions == null)
          ? this.neIssueExtensions = new NEIssueExtensions.Selector<>(this._root, this, "neIssueExtensions")
          : this.neIssueExtensions
      );
    }
  }
}
