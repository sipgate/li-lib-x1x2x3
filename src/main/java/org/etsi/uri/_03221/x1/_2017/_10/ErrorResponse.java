//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

/*
 * SPDX-License-Identifier: MIT
 */
package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import java.util.HashMap;
import java.util.Map;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 * <p>Java class for ErrorResponse complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ErrorResponse">
 *   <complexContent>
 *     <extension base="{http://uri.etsi.org/03221/X1/2017/10}X1ResponseMessage">
 *       <sequence>
 *         <element name="requestMessageType" type="{http://uri.etsi.org/03221/X1/2017/10}RequestMessageType"/>
 *         <element name="errorInformation" type="{http://uri.etsi.org/03221/X1/2017/10}ErrorInformation"/>
 *         <element name="extensionInformation" type="{http://uri.etsi.org/03221/X1/2017/10}ExtensionInformation" minOccurs="0"/>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ErrorResponse", propOrder = { "requestMessageType", "errorInformation", "extensionInformation" })
public class ErrorResponse extends X1ResponseMessage implements Copyable, PartialCopyable {

  @XmlElement(required = true)
  @XmlSchemaType(name = "string")
  protected RequestMessageType requestMessageType;

  @XmlElement(required = true)
  protected ErrorInformation errorInformation;

  protected ExtensionInformation extensionInformation;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ErrorResponse() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ErrorResponse copying the state of another ErrorResponse
   *
   * @param _other
   *     The original ErrorResponse from which to copy state.
   */
  public ErrorResponse(final ErrorResponse _other) {
    super(_other);
    this.requestMessageType = _other.requestMessageType;
    this.errorInformation = ((_other.errorInformation == null) ? null : _other.errorInformation.createCopy());
    this.extensionInformation = ((_other.extensionInformation == null)
        ? null
        : _other.extensionInformation.createCopy());
  }

  /**
   * Instantiates a ErrorResponse copying the state of another ErrorResponse
   *
   * @param _other
   *     The original ErrorResponse from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public ErrorResponse(
    final ErrorResponse _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree requestMessageTypePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("requestMessageType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (requestMessageTypePropertyTree != null)
          : ((requestMessageTypePropertyTree == null) || (!requestMessageTypePropertyTree.isLeaf())))
    ) {
      this.requestMessageType = _other.requestMessageType;
    }
    final PropertyTree errorInformationPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("errorInformation"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorInformationPropertyTree != null)
          : ((errorInformationPropertyTree == null) || (!errorInformationPropertyTree.isLeaf())))
    ) {
      this.errorInformation = ((_other.errorInformation == null)
          ? null
          : _other.errorInformation.createCopy(errorInformationPropertyTree, _propertyTreeUse));
    }
    final PropertyTree extensionInformationPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("extensionInformation"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (extensionInformationPropertyTree != null)
          : ((extensionInformationPropertyTree == null) || (!extensionInformationPropertyTree.isLeaf())))
    ) {
      this.extensionInformation = ((_other.extensionInformation == null)
          ? null
          : _other.extensionInformation.createCopy(extensionInformationPropertyTree, _propertyTreeUse));
    }
  }

  /**
   * Gets the value of the requestMessageType property.
   *
   * @return
   *     possible object is
   *     {@link RequestMessageType }
   *
   */
  public RequestMessageType getRequestMessageType() {
    return requestMessageType;
  }

  /**
   * Sets the value of the requestMessageType property.
   *
   * @param value
   *     allowed object is
   *     {@link RequestMessageType }
   *
   */
  public void setRequestMessageType(RequestMessageType value) {
    this.requestMessageType = value;
  }

  /**
   * Gets the value of the errorInformation property.
   *
   * @return
   *     possible object is
   *     {@link ErrorInformation }
   *
   */
  public ErrorInformation getErrorInformation() {
    return errorInformation;
  }

  /**
   * Sets the value of the errorInformation property.
   *
   * @param value
   *     allowed object is
   *     {@link ErrorInformation }
   *
   */
  public void setErrorInformation(ErrorInformation value) {
    this.errorInformation = value;
  }

  /**
   * Gets the value of the extensionInformation property.
   *
   * @return
   *     possible object is
   *     {@link ExtensionInformation }
   *
   */
  public ExtensionInformation getExtensionInformation() {
    return extensionInformation;
  }

  /**
   * Sets the value of the extensionInformation property.
   *
   * @param value
   *     allowed object is
   *     {@link ExtensionInformation }
   *
   */
  public void setExtensionInformation(ExtensionInformation value) {
    this.extensionInformation = value;
  }

  @Override
  public ErrorResponse createCopy() {
    final ErrorResponse _newObject = ((ErrorResponse) super.createCopy());
    _newObject.requestMessageType = this.requestMessageType;
    _newObject.errorInformation = ((this.errorInformation == null) ? null : this.errorInformation.createCopy());
    _newObject.extensionInformation = ((this.extensionInformation == null)
        ? null
        : this.extensionInformation.createCopy());
    return _newObject;
  }

  @Override
  public ErrorResponse createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final ErrorResponse _newObject = ((ErrorResponse) super.createCopy(_propertyTree, _propertyTreeUse));
    final PropertyTree requestMessageTypePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("requestMessageType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (requestMessageTypePropertyTree != null)
          : ((requestMessageTypePropertyTree == null) || (!requestMessageTypePropertyTree.isLeaf())))
    ) {
      _newObject.requestMessageType = this.requestMessageType;
    }
    final PropertyTree errorInformationPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("errorInformation"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorInformationPropertyTree != null)
          : ((errorInformationPropertyTree == null) || (!errorInformationPropertyTree.isLeaf())))
    ) {
      _newObject.errorInformation = ((this.errorInformation == null)
          ? null
          : this.errorInformation.createCopy(errorInformationPropertyTree, _propertyTreeUse));
    }
    final PropertyTree extensionInformationPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("extensionInformation"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (extensionInformationPropertyTree != null)
          : ((extensionInformationPropertyTree == null) || (!extensionInformationPropertyTree.isLeaf())))
    ) {
      _newObject.extensionInformation = ((this.extensionInformation == null)
          ? null
          : this.extensionInformation.createCopy(extensionInformationPropertyTree, _propertyTreeUse));
    }
    return _newObject;
  }

  @Override
  public ErrorResponse copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public ErrorResponse copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ErrorResponse.Builder<_B> _other) {
    super.copyTo(_other);
    _other.requestMessageType = this.requestMessageType;
    _other.errorInformation = ((this.errorInformation == null) ? null : this.errorInformation.newCopyBuilder(_other));
    _other.extensionInformation = ((this.extensionInformation == null)
        ? null
        : this.extensionInformation.newCopyBuilder(_other));
  }

  @Override
  public <_B> ErrorResponse.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ErrorResponse.Builder<_B>(_parentBuilder, this, true);
  }

  @Override
  public ErrorResponse.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ErrorResponse.Builder<Void> builder() {
    return new ErrorResponse.Builder<>(null, null, false);
  }

  public static <_B> ErrorResponse.Builder<_B> copyOf(final X1ResponseMessage _other) {
    final ErrorResponse.Builder<_B> _newBuilder = new ErrorResponse.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  public static <_B> ErrorResponse.Builder<_B> copyOf(final ErrorResponse _other) {
    final ErrorResponse.Builder<_B> _newBuilder = new ErrorResponse.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ErrorResponse.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super.copyTo(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree requestMessageTypePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("requestMessageType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (requestMessageTypePropertyTree != null)
          : ((requestMessageTypePropertyTree == null) || (!requestMessageTypePropertyTree.isLeaf())))
    ) {
      _other.requestMessageType = this.requestMessageType;
    }
    final PropertyTree errorInformationPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("errorInformation"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorInformationPropertyTree != null)
          : ((errorInformationPropertyTree == null) || (!errorInformationPropertyTree.isLeaf())))
    ) {
      _other.errorInformation = ((this.errorInformation == null)
          ? null
          : this.errorInformation.newCopyBuilder(_other, errorInformationPropertyTree, _propertyTreeUse));
    }
    final PropertyTree extensionInformationPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("extensionInformation"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (extensionInformationPropertyTree != null)
          : ((extensionInformationPropertyTree == null) || (!extensionInformationPropertyTree.isLeaf())))
    ) {
      _other.extensionInformation = ((this.extensionInformation == null)
          ? null
          : this.extensionInformation.newCopyBuilder(_other, extensionInformationPropertyTree, _propertyTreeUse));
    }
  }

  @Override
  public <_B> ErrorResponse.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ErrorResponse.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  @Override
  public ErrorResponse.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ErrorResponse.Builder<_B> copyOf(
    final X1ResponseMessage _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ErrorResponse.Builder<_B> _newBuilder = new ErrorResponse.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static <_B> ErrorResponse.Builder<_B> copyOf(
    final ErrorResponse _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ErrorResponse.Builder<_B> _newBuilder = new ErrorResponse.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ErrorResponse.Builder<Void> copyExcept(
    final X1ResponseMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ErrorResponse.Builder<Void> copyExcept(final ErrorResponse _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ErrorResponse.Builder<Void> copyOnly(final X1ResponseMessage _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static ErrorResponse.Builder<Void> copyOnly(final ErrorResponse _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> extends X1ResponseMessage.Builder<_B> implements Buildable {

    private RequestMessageType requestMessageType;
    private ErrorInformation.Builder<ErrorResponse.Builder<_B>> errorInformation;
    private ExtensionInformation.Builder<ErrorResponse.Builder<_B>> extensionInformation;

    public Builder(final _B _parentBuilder, final ErrorResponse _other, final boolean _copy) {
      super(_parentBuilder, _other, _copy);
      if (_other != null) {
        this.requestMessageType = _other.requestMessageType;
        this.errorInformation = ((_other.errorInformation == null)
            ? null
            : _other.errorInformation.newCopyBuilder(this));
        this.extensionInformation = ((_other.extensionInformation == null)
            ? null
            : _other.extensionInformation.newCopyBuilder(this));
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ErrorResponse _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
      if (_other != null) {
        final PropertyTree requestMessageTypePropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("requestMessageType"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (requestMessageTypePropertyTree != null)
              : ((requestMessageTypePropertyTree == null) || (!requestMessageTypePropertyTree.isLeaf())))
        ) {
          this.requestMessageType = _other.requestMessageType;
        }
        final PropertyTree errorInformationPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("errorInformation"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (errorInformationPropertyTree != null)
              : ((errorInformationPropertyTree == null) || (!errorInformationPropertyTree.isLeaf())))
        ) {
          this.errorInformation = ((_other.errorInformation == null)
              ? null
              : _other.errorInformation.newCopyBuilder(this, errorInformationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree extensionInformationPropertyTree =
          ((_propertyTree == null) ? null : _propertyTree.get("extensionInformation"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (extensionInformationPropertyTree != null)
              : ((extensionInformationPropertyTree == null) || (!extensionInformationPropertyTree.isLeaf())))
        ) {
          this.extensionInformation = ((_other.extensionInformation == null)
              ? null
              : _other.extensionInformation.newCopyBuilder(this, extensionInformationPropertyTree, _propertyTreeUse));
        }
      }
    }

    protected <_P extends ErrorResponse> _P init(final _P _product) {
      _product.requestMessageType = this.requestMessageType;
      _product.errorInformation = ((this.errorInformation == null) ? null : this.errorInformation.build());
      _product.extensionInformation = ((this.extensionInformation == null) ? null : this.extensionInformation.build());
      return super.init(_product);
    }

    /**
     * Sets the new value of "requestMessageType" (any previous value will be replaced)
     *
     * @param requestMessageType
     *     New value of the "requestMessageType" property.
     */
    public ErrorResponse.Builder<_B> withRequestMessageType(final RequestMessageType requestMessageType) {
      this.requestMessageType = requestMessageType;
      return this;
    }

    /**
     * Sets the new value of "errorInformation" (any previous value will be replaced)
     *
     * @param errorInformation
     *     New value of the "errorInformation" property.
     */
    public ErrorResponse.Builder<_B> withErrorInformation(final ErrorInformation errorInformation) {
      this.errorInformation = ((errorInformation == null)
          ? null
          : new ErrorInformation.Builder<>(this, errorInformation, false));
      return this;
    }

    /**
     * Returns the existing builder or a new builder to build the value of the
     * "errorInformation" property.
     * Use {@link org.etsi.uri._03221.x1._2017._10.ErrorInformation.Builder#end()} to
     * return to the current builder.
     *
     * @return
     *     A new builder to build the value of the "errorInformation" property.
     *     Use {@link org.etsi.uri._03221.x1._2017._10.ErrorInformation.Builder#end()} to
     *     return to the current builder.
     */
    public ErrorInformation.Builder<? extends ErrorResponse.Builder<_B>> withErrorInformation() {
      if (this.errorInformation != null) {
        return this.errorInformation;
      }
      return this.errorInformation = new ErrorInformation.Builder<>(this, null, false);
    }

    /**
     * Sets the new value of "extensionInformation" (any previous value will be
     * replaced)
     *
     * @param extensionInformation
     *     New value of the "extensionInformation" property.
     */
    public ErrorResponse.Builder<_B> withExtensionInformation(final ExtensionInformation extensionInformation) {
      this.extensionInformation = ((extensionInformation == null)
          ? null
          : new ExtensionInformation.Builder<>(this, extensionInformation, false));
      return this;
    }

    /**
     * Returns the existing builder or a new builder to build the value of the
     * "extensionInformation" property.
     * Use {@link org.etsi.uri._03221.x1._2017._10.ExtensionInformation.Builder#end()}
     * to return to the current builder.
     *
     * @return
     *     A new builder to build the value of the "extensionInformation" property.
     *     Use {@link org.etsi.uri._03221.x1._2017._10.ExtensionInformation.Builder#end()}
     *     to return to the current builder.
     */
    public ExtensionInformation.Builder<? extends ErrorResponse.Builder<_B>> withExtensionInformation() {
      if (this.extensionInformation != null) {
        return this.extensionInformation;
      }
      return this.extensionInformation = new ExtensionInformation.Builder<>(this, null, false);
    }

    /**
     * Sets the new value of "admfIdentifier" (any previous value will be replaced)
     *
     * @param admfIdentifier
     *     New value of the "admfIdentifier" property.
     */
    @Override
    public ErrorResponse.Builder<_B> withAdmfIdentifier(final String admfIdentifier) {
      super.withAdmfIdentifier(admfIdentifier);
      return this;
    }

    /**
     * Sets the new value of "neIdentifier" (any previous value will be replaced)
     *
     * @param neIdentifier
     *     New value of the "neIdentifier" property.
     */
    @Override
    public ErrorResponse.Builder<_B> withNeIdentifier(final String neIdentifier) {
      super.withNeIdentifier(neIdentifier);
      return this;
    }

    /**
     * Sets the new value of "messageTimestamp" (any previous value will be replaced)
     *
     * @param messageTimestamp
     *     New value of the "messageTimestamp" property.
     */
    @Override
    public ErrorResponse.Builder<_B> withMessageTimestamp(final XMLGregorianCalendar messageTimestamp) {
      super.withMessageTimestamp(messageTimestamp);
      return this;
    }

    /**
     * Sets the new value of "version" (any previous value will be replaced)
     *
     * @param version
     *     New value of the "version" property.
     */
    @Override
    public ErrorResponse.Builder<_B> withVersion(final String version) {
      super.withVersion(version);
      return this;
    }

    /**
     * Sets the new value of "x1TransactionId" (any previous value will be replaced)
     *
     * @param x1TransactionId
     *     New value of the "x1TransactionId" property.
     */
    @Override
    public ErrorResponse.Builder<_B> withX1TransactionId(final String x1TransactionId) {
      super.withX1TransactionId(x1TransactionId);
      return this;
    }

    @Override
    public ErrorResponse build() {
      if (_storedValue == null) {
        return this.init(new ErrorResponse());
      } else {
        return ((ErrorResponse) _storedValue);
      }
    }

    public ErrorResponse.Builder<_B> copyOf(final ErrorResponse _other) {
      _other.copyTo(this);
      return this;
    }

    public ErrorResponse.Builder<_B> copyOf(final ErrorResponse.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends ErrorResponse.Selector<ErrorResponse.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ErrorResponse.Select _root() {
      return new ErrorResponse.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends X1ResponseMessage.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ErrorResponse.Selector<TRoot, TParent>> requestMessageType = null;
    private ErrorInformation.Selector<TRoot, ErrorResponse.Selector<TRoot, TParent>> errorInformation = null;
    private ExtensionInformation.Selector<TRoot, ErrorResponse.Selector<TRoot, TParent>> extensionInformation = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.requestMessageType != null) {
        products.put("requestMessageType", this.requestMessageType.init());
      }
      if (this.errorInformation != null) {
        products.put("errorInformation", this.errorInformation.init());
      }
      if (this.extensionInformation != null) {
        products.put("extensionInformation", this.extensionInformation.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ErrorResponse.Selector<TRoot, TParent>> requestMessageType() {
      return (
        (this.requestMessageType == null)
          ? this.requestMessageType = new com.kscs.util.jaxb.Selector<>(this._root, this, "requestMessageType")
          : this.requestMessageType
      );
    }

    public ErrorInformation.Selector<TRoot, ErrorResponse.Selector<TRoot, TParent>> errorInformation() {
      return (
        (this.errorInformation == null)
          ? this.errorInformation = new ErrorInformation.Selector<>(this._root, this, "errorInformation")
          : this.errorInformation
      );
    }

    public ExtensionInformation.Selector<TRoot, ErrorResponse.Selector<TRoot, TParent>> extensionInformation() {
      return (
        (this.extensionInformation == null)
          ? this.extensionInformation = new ExtensionInformation.Selector<>(this._root, this, "extensionInformation")
          : this.extensionInformation
      );
    }
  }
}
