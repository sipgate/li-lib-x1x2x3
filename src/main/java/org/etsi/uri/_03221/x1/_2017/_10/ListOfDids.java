//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>Java class for ListOfDids complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ListOfDids">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="dId" type="{http://uri.etsi.org/03221/X1/2017/10}DId" maxOccurs="unbounded" minOccurs="0"/>
 *         <element name="dSId" type="{http://uri.etsi.org/03221/X1/2017/10}GenericObjectID" maxOccurs="unbounded" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ListOfDids", propOrder = { "dId", "dsId" })
public class ListOfDids implements Copyable, PartialCopyable {

  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "token")
  protected List<String> dId;

  @XmlElement(name = "dSId")
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "token")
  protected List<String> dsId;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ListOfDids() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ListOfDids copying the state of another ListOfDids
   *
   * @param _other
   *     The original ListOfDids from which to copy state.
   */
  public ListOfDids(final ListOfDids _other) {
    this.dId = ((_other.dId == null) ? null : new ArrayList<>(_other.dId));
    this.dsId = ((_other.dsId == null) ? null : new ArrayList<>(_other.dsId));
  }

  /**
   * Instantiates a ListOfDids copying the state of another ListOfDids
   *
   * @param _other
   *     The original ListOfDids from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public ListOfDids(final ListOfDids _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final PropertyTree dIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (dIdPropertyTree != null)
          : ((dIdPropertyTree == null) || (!dIdPropertyTree.isLeaf())))
    ) {
      this.dId = ((_other.dId == null) ? null : new ArrayList<>(_other.dId));
    }
    final PropertyTree dsIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dsId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (dsIdPropertyTree != null)
          : ((dsIdPropertyTree == null) || (!dsIdPropertyTree.isLeaf())))
    ) {
      this.dsId = ((_other.dsId == null) ? null : new ArrayList<>(_other.dsId));
    }
  }

  /**
   * Gets the value of the dId property.
   *
   * <p>
   * This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the Jakarta XML Binding object.
   * This is why there is not a {@code set} method for the dId property.
   *
   * <p>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getDId().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link String }
   *
   *
   * @return
   *     The value of the dId property.
   */
  public List<String> getDId() {
    if (dId == null) {
      dId = new ArrayList<>();
    }
    return this.dId;
  }

  /**
   * Gets the value of the dsId property.
   *
   * <p>
   * This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the Jakarta XML Binding object.
   * This is why there is not a {@code set} method for the dsId property.
   *
   * <p>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getDSId().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link String }
   *
   *
   * @return
   *     The value of the dsId property.
   */
  public List<String> getDSId() {
    if (dsId == null) {
      dsId = new ArrayList<>();
    }
    return this.dsId;
  }

  @Override
  public ListOfDids createCopy() {
    final ListOfDids _newObject;
    try {
      _newObject = ((ListOfDids) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.dId = ((this.dId == null) ? null : new ArrayList<>(this.dId));
    _newObject.dsId = ((this.dsId == null) ? null : new ArrayList<>(this.dsId));
    return _newObject;
  }

  @Override
  public ListOfDids createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final ListOfDids _newObject;
    try {
      _newObject = ((ListOfDids) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    final PropertyTree dIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (dIdPropertyTree != null)
          : ((dIdPropertyTree == null) || (!dIdPropertyTree.isLeaf())))
    ) {
      _newObject.dId = ((this.dId == null) ? null : new ArrayList<>(this.dId));
    }
    final PropertyTree dsIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dsId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (dsIdPropertyTree != null)
          : ((dsIdPropertyTree == null) || (!dsIdPropertyTree.isLeaf())))
    ) {
      _newObject.dsId = ((this.dsId == null) ? null : new ArrayList<>(this.dsId));
    }
    return _newObject;
  }

  @Override
  public ListOfDids copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public ListOfDids copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ListOfDids.Builder<_B> _other) {
    if (this.dId == null) {
      _other.dId = null;
    } else {
      _other.dId = new ArrayList<>();
      for (String _item : this.dId) {
        _other.dId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
      }
    }
    if (this.dsId == null) {
      _other.dsId = null;
    } else {
      _other.dsId = new ArrayList<>();
      for (String _item : this.dsId) {
        _other.dsId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
      }
    }
  }

  public <_B> ListOfDids.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ListOfDids.Builder<_B>(_parentBuilder, this, true);
  }

  public ListOfDids.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ListOfDids.Builder<Void> builder() {
    return new ListOfDids.Builder<>(null, null, false);
  }

  public static <_B> ListOfDids.Builder<_B> copyOf(final ListOfDids _other) {
    final ListOfDids.Builder<_B> _newBuilder = new ListOfDids.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ListOfDids.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree dIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (dIdPropertyTree != null)
          : ((dIdPropertyTree == null) || (!dIdPropertyTree.isLeaf())))
    ) {
      if (this.dId == null) {
        _other.dId = null;
      } else {
        _other.dId = new ArrayList<>();
        for (String _item : this.dId) {
          _other.dId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
        }
      }
    }
    final PropertyTree dsIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dsId"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (dsIdPropertyTree != null)
          : ((dsIdPropertyTree == null) || (!dsIdPropertyTree.isLeaf())))
    ) {
      if (this.dsId == null) {
        _other.dsId = null;
      } else {
        _other.dsId = new ArrayList<>();
        for (String _item : this.dsId) {
          _other.dsId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
        }
      }
    }
  }

  public <_B> ListOfDids.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ListOfDids.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public ListOfDids.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ListOfDids.Builder<_B> copyOf(
    final ListOfDids _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ListOfDids.Builder<_B> _newBuilder = new ListOfDids.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ListOfDids.Builder<Void> copyExcept(final ListOfDids _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ListOfDids.Builder<Void> copyOnly(final ListOfDids _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final ListOfDids _storedValue;
    private List<Buildable> dId;
    private List<Buildable> dsId;

    public Builder(final _B _parentBuilder, final ListOfDids _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          if (_other.dId == null) {
            this.dId = null;
          } else {
            this.dId = new ArrayList<>();
            for (String _item : _other.dId) {
              this.dId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
            }
          }
          if (_other.dsId == null) {
            this.dsId = null;
          } else {
            this.dsId = new ArrayList<>();
            for (String _item : _other.dsId) {
              this.dsId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
            }
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ListOfDids _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree dIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dId"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (dIdPropertyTree != null)
                : ((dIdPropertyTree == null) || (!dIdPropertyTree.isLeaf())))
          ) {
            if (_other.dId == null) {
              this.dId = null;
            } else {
              this.dId = new ArrayList<>();
              for (String _item : _other.dId) {
                this.dId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
              }
            }
          }
          final PropertyTree dsIdPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("dsId"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (dsIdPropertyTree != null)
                : ((dsIdPropertyTree == null) || (!dsIdPropertyTree.isLeaf())))
          ) {
            if (_other.dsId == null) {
              this.dsId = null;
            } else {
              this.dsId = new ArrayList<>();
              for (String _item : _other.dsId) {
                this.dsId.add(((_item == null) ? null : new Buildable.PrimitiveBuildable(_item)));
              }
            }
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends ListOfDids> _P init(final _P _product) {
      if (this.dId != null) {
        final List<String> dId = new ArrayList<>(this.dId.size());
        for (Buildable _item : this.dId) {
          dId.add(((String) _item.build()));
        }
        _product.dId = dId;
      }
      if (this.dsId != null) {
        final List<String> dsId = new ArrayList<>(this.dsId.size());
        for (Buildable _item : this.dsId) {
          dsId.add(((String) _item.build()));
        }
        _product.dsId = dsId;
      }
      return _product;
    }

    /**
     * Adds the given items to the value of "dId"
     *
     * @param dId
     *     Items to add to the value of the "dId" property
     */
    public ListOfDids.Builder<_B> addDId(final Iterable<? extends String> dId) {
      if (dId != null) {
        if (this.dId == null) {
          this.dId = new ArrayList<>();
        }
        for (String _item : dId) {
          this.dId.add(new Buildable.PrimitiveBuildable(_item));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "dId" (any previous value will be replaced)
     *
     * @param dId
     *     New value of the "dId" property.
     */
    public ListOfDids.Builder<_B> withDId(final Iterable<? extends String> dId) {
      if (this.dId != null) {
        this.dId.clear();
      }
      return addDId(dId);
    }

    /**
     * Adds the given items to the value of "dId"
     *
     * @param dId
     *     Items to add to the value of the "dId" property
     */
    public ListOfDids.Builder<_B> addDId(String... dId) {
      addDId(Arrays.asList(dId));
      return this;
    }

    /**
     * Sets the new value of "dId" (any previous value will be replaced)
     *
     * @param dId
     *     New value of the "dId" property.
     */
    public ListOfDids.Builder<_B> withDId(String... dId) {
      withDId(Arrays.asList(dId));
      return this;
    }

    /**
     * Adds the given items to the value of "dsId"
     *
     * @param dsId
     *     Items to add to the value of the "dsId" property
     */
    public ListOfDids.Builder<_B> addDSId(final Iterable<? extends String> dsId) {
      if (dsId != null) {
        if (this.dsId == null) {
          this.dsId = new ArrayList<>();
        }
        for (String _item : dsId) {
          this.dsId.add(new Buildable.PrimitiveBuildable(_item));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "dsId" (any previous value will be replaced)
     *
     * @param dsId
     *     New value of the "dsId" property.
     */
    public ListOfDids.Builder<_B> withDSId(final Iterable<? extends String> dsId) {
      if (this.dsId != null) {
        this.dsId.clear();
      }
      return addDSId(dsId);
    }

    /**
     * Adds the given items to the value of "dsId"
     *
     * @param dsId
     *     Items to add to the value of the "dsId" property
     */
    public ListOfDids.Builder<_B> addDSId(String... dsId) {
      addDSId(Arrays.asList(dsId));
      return this;
    }

    /**
     * Sets the new value of "dsId" (any previous value will be replaced)
     *
     * @param dsId
     *     New value of the "dsId" property.
     */
    public ListOfDids.Builder<_B> withDSId(String... dsId) {
      withDSId(Arrays.asList(dsId));
      return this;
    }

    @Override
    public ListOfDids build() {
      if (_storedValue == null) {
        return this.init(new ListOfDids());
      } else {
        return ((ListOfDids) _storedValue);
      }
    }

    public ListOfDids.Builder<_B> copyOf(final ListOfDids _other) {
      _other.copyTo(this);
      return this;
    }

    public ListOfDids.Builder<_B> copyOf(final ListOfDids.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends ListOfDids.Selector<ListOfDids.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ListOfDids.Select _root() {
      return new ListOfDids.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ListOfDids.Selector<TRoot, TParent>> dId = null;
    private com.kscs.util.jaxb.Selector<TRoot, ListOfDids.Selector<TRoot, TParent>> dsId = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.dId != null) {
        products.put("dId", this.dId.init());
      }
      if (this.dsId != null) {
        products.put("dsId", this.dsId.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ListOfDids.Selector<TRoot, TParent>> dId() {
      return ((this.dId == null) ? this.dId = new com.kscs.util.jaxb.Selector<>(this._root, this, "dId") : this.dId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ListOfDids.Selector<TRoot, TParent>> dsId() {
      return (
        (this.dsId == null) ? this.dsId = new com.kscs.util.jaxb.Selector<>(this._root, this, "dsId") : this.dsId
      );
    }
  }
}
