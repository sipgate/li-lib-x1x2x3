//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

/*
 * SPDX-License-Identifier: MIT
 */
package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.HashMap;
import java.util.Map;
import org.w3._2001.xmlschema.Adapter1;

/**
 * <p>Java class for ErrorInformation complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ErrorInformation">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="errorCode" type="{http://www.w3.org/2001/XMLSchema}integer"/>
 *         <element name="errorDescription" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ErrorInformation", propOrder = { "errorCode", "errorDescription" })
public class ErrorInformation implements Copyable, PartialCopyable {

  @XmlElement(required = true, type = String.class)
  @XmlJavaTypeAdapter(Adapter1.class)
  @XmlSchemaType(name = "integer")
  protected Long errorCode;

  @XmlElement(required = true)
  protected String errorDescription;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ErrorInformation() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ErrorInformation copying the state of another ErrorInformation
   *
   * @param _other
   *     The original ErrorInformation from which to copy state.
   */
  public ErrorInformation(final ErrorInformation _other) {
    this.errorCode = _other.errorCode;
    this.errorDescription = _other.errorDescription;
  }

  /**
   * Instantiates a ErrorInformation copying the state of another ErrorInformation
   *
   * @param _other
   *     The original ErrorInformation from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public ErrorInformation(
    final ErrorInformation _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree errorCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("errorCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorCodePropertyTree != null)
          : ((errorCodePropertyTree == null) || (!errorCodePropertyTree.isLeaf())))
    ) {
      this.errorCode = _other.errorCode;
    }
    final PropertyTree errorDescriptionPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("errorDescription"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorDescriptionPropertyTree != null)
          : ((errorDescriptionPropertyTree == null) || (!errorDescriptionPropertyTree.isLeaf())))
    ) {
      this.errorDescription = _other.errorDescription;
    }
  }

  /**
   * Gets the value of the errorCode property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public Long getErrorCode() {
    return errorCode;
  }

  /**
   * Sets the value of the errorCode property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setErrorCode(Long value) {
    this.errorCode = value;
  }

  /**
   * Gets the value of the errorDescription property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getErrorDescription() {
    return errorDescription;
  }

  /**
   * Sets the value of the errorDescription property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setErrorDescription(String value) {
    this.errorDescription = value;
  }

  @Override
  public ErrorInformation createCopy() {
    final ErrorInformation _newObject;
    try {
      _newObject = ((ErrorInformation) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.errorCode = this.errorCode;
    _newObject.errorDescription = this.errorDescription;
    return _newObject;
  }

  @Override
  public ErrorInformation createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final ErrorInformation _newObject;
    try {
      _newObject = ((ErrorInformation) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    final PropertyTree errorCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("errorCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorCodePropertyTree != null)
          : ((errorCodePropertyTree == null) || (!errorCodePropertyTree.isLeaf())))
    ) {
      _newObject.errorCode = this.errorCode;
    }
    final PropertyTree errorDescriptionPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("errorDescription"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorDescriptionPropertyTree != null)
          : ((errorDescriptionPropertyTree == null) || (!errorDescriptionPropertyTree.isLeaf())))
    ) {
      _newObject.errorDescription = this.errorDescription;
    }
    return _newObject;
  }

  @Override
  public ErrorInformation copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public ErrorInformation copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ErrorInformation.Builder<_B> _other) {
    _other.errorCode = this.errorCode;
    _other.errorDescription = this.errorDescription;
  }

  public <_B> ErrorInformation.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ErrorInformation.Builder<_B>(_parentBuilder, this, true);
  }

  public ErrorInformation.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ErrorInformation.Builder<Void> builder() {
    return new ErrorInformation.Builder<>(null, null, false);
  }

  public static <_B> ErrorInformation.Builder<_B> copyOf(final ErrorInformation _other) {
    final ErrorInformation.Builder<_B> _newBuilder = new ErrorInformation.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ErrorInformation.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree errorCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("errorCode"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorCodePropertyTree != null)
          : ((errorCodePropertyTree == null) || (!errorCodePropertyTree.isLeaf())))
    ) {
      _other.errorCode = this.errorCode;
    }
    final PropertyTree errorDescriptionPropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("errorDescription"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (errorDescriptionPropertyTree != null)
          : ((errorDescriptionPropertyTree == null) || (!errorDescriptionPropertyTree.isLeaf())))
    ) {
      _other.errorDescription = this.errorDescription;
    }
  }

  public <_B> ErrorInformation.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ErrorInformation.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public ErrorInformation.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ErrorInformation.Builder<_B> copyOf(
    final ErrorInformation _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ErrorInformation.Builder<_B> _newBuilder = new ErrorInformation.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ErrorInformation.Builder<Void> copyExcept(
    final ErrorInformation _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ErrorInformation.Builder<Void> copyOnly(
    final ErrorInformation _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final ErrorInformation _storedValue;
    private Long errorCode;
    private String errorDescription;

    public Builder(final _B _parentBuilder, final ErrorInformation _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          this.errorCode = _other.errorCode;
          this.errorDescription = _other.errorDescription;
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ErrorInformation _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree errorCodePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("errorCode"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (errorCodePropertyTree != null)
                : ((errorCodePropertyTree == null) || (!errorCodePropertyTree.isLeaf())))
          ) {
            this.errorCode = _other.errorCode;
          }
          final PropertyTree errorDescriptionPropertyTree =
            ((_propertyTree == null) ? null : _propertyTree.get("errorDescription"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (errorDescriptionPropertyTree != null)
                : ((errorDescriptionPropertyTree == null) || (!errorDescriptionPropertyTree.isLeaf())))
          ) {
            this.errorDescription = _other.errorDescription;
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends ErrorInformation> _P init(final _P _product) {
      _product.errorCode = this.errorCode;
      _product.errorDescription = this.errorDescription;
      return _product;
    }

    /**
     * Sets the new value of "errorCode" (any previous value will be replaced)
     *
     * @param errorCode
     *     New value of the "errorCode" property.
     */
    public ErrorInformation.Builder<_B> withErrorCode(final Long errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    /**
     * Sets the new value of "errorDescription" (any previous value will be replaced)
     *
     * @param errorDescription
     *     New value of the "errorDescription" property.
     */
    public ErrorInformation.Builder<_B> withErrorDescription(final String errorDescription) {
      this.errorDescription = errorDescription;
      return this;
    }

    @Override
    public ErrorInformation build() {
      if (_storedValue == null) {
        return this.init(new ErrorInformation());
      } else {
        return ((ErrorInformation) _storedValue);
      }
    }

    public ErrorInformation.Builder<_B> copyOf(final ErrorInformation _other) {
      _other.copyTo(this);
      return this;
    }

    public ErrorInformation.Builder<_B> copyOf(final ErrorInformation.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends ErrorInformation.Selector<ErrorInformation.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ErrorInformation.Select _root() {
      return new ErrorInformation.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ErrorInformation.Selector<TRoot, TParent>> errorCode = null;
    private com.kscs.util.jaxb.Selector<TRoot, ErrorInformation.Selector<TRoot, TParent>> errorDescription = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.errorCode != null) {
        products.put("errorCode", this.errorCode.init());
      }
      if (this.errorDescription != null) {
        products.put("errorDescription", this.errorDescription.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ErrorInformation.Selector<TRoot, TParent>> errorCode() {
      return (
        (this.errorCode == null)
          ? this.errorCode = new com.kscs.util.jaxb.Selector<>(this._root, this, "errorCode")
          : this.errorCode
      );
    }

    public com.kscs.util.jaxb.Selector<TRoot, ErrorInformation.Selector<TRoot, TParent>> errorDescription() {
      return (
        (this.errorDescription == null)
          ? this.errorDescription = new com.kscs.util.jaxb.Selector<>(this._root, this, "errorDescription")
          : this.errorDescription
      );
    }
  }
}
