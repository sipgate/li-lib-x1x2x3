//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

/*
 * SPDX-License-Identifier: MIT
 */
package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>Java class for RequestContainer complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="RequestContainer">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="x1RequestMessage" type="{http://uri.etsi.org/03221/X1/2017/10}X1RequestMessage" maxOccurs="unbounded"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RequestContainer", propOrder = { "x1RequestMessage" })
public class RequestContainer implements Copyable, PartialCopyable {

  @XmlElement(required = true)
  protected List<X1RequestMessage> x1RequestMessage;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public RequestContainer() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a RequestContainer copying the state of another RequestContainer
   *
   * @param _other
   *     The original RequestContainer from which to copy state.
   */
  public RequestContainer(final RequestContainer _other) {
    if (_other.x1RequestMessage == null) {
      this.x1RequestMessage = null;
    } else {
      this.x1RequestMessage = new ArrayList<>();
      for (X1RequestMessage _item : _other.x1RequestMessage) {
        this.x1RequestMessage.add(((_item == null) ? null : _item.createCopy()));
      }
    }
  }

  /**
   * Instantiates a RequestContainer copying the state of another RequestContainer
   *
   * @param _other
   *     The original RequestContainer from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public RequestContainer(
    final RequestContainer _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree x1RequestMessagePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("x1RequestMessage"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (x1RequestMessagePropertyTree != null)
          : ((x1RequestMessagePropertyTree == null) || (!x1RequestMessagePropertyTree.isLeaf())))
    ) {
      if (_other.x1RequestMessage == null) {
        this.x1RequestMessage = null;
      } else {
        this.x1RequestMessage = new ArrayList<>();
        for (X1RequestMessage _item : _other.x1RequestMessage) {
          this.x1RequestMessage.add(
              ((_item == null) ? null : _item.createCopy(x1RequestMessagePropertyTree, _propertyTreeUse))
            );
        }
      }
    }
  }

  /**
   * Gets the value of the x1RequestMessage property.
   *
   * <p>
   * This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the Jakarta XML Binding object.
   * This is why there is not a {@code set} method for the x1RequestMessage property.
   *
   * <p>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getX1RequestMessage().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link X1RequestMessage }
   *
   *
   * @return
   *     The value of the x1RequestMessage property.
   */
  public List<X1RequestMessage> getX1RequestMessage() {
    if (x1RequestMessage == null) {
      x1RequestMessage = new ArrayList<>();
    }
    return this.x1RequestMessage;
  }

  @Override
  public RequestContainer createCopy() {
    final RequestContainer _newObject;
    try {
      _newObject = ((RequestContainer) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    if (this.x1RequestMessage == null) {
      _newObject.x1RequestMessage = null;
    } else {
      _newObject.x1RequestMessage = new ArrayList<>();
      for (X1RequestMessage _item : this.x1RequestMessage) {
        _newObject.x1RequestMessage.add(((_item == null) ? null : _item.createCopy()));
      }
    }
    return _newObject;
  }

  @Override
  public RequestContainer createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final RequestContainer _newObject;
    try {
      _newObject = ((RequestContainer) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    final PropertyTree x1RequestMessagePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("x1RequestMessage"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (x1RequestMessagePropertyTree != null)
          : ((x1RequestMessagePropertyTree == null) || (!x1RequestMessagePropertyTree.isLeaf())))
    ) {
      if (this.x1RequestMessage == null) {
        _newObject.x1RequestMessage = null;
      } else {
        _newObject.x1RequestMessage = new ArrayList<>();
        for (X1RequestMessage _item : this.x1RequestMessage) {
          _newObject.x1RequestMessage.add(
            ((_item == null) ? null : _item.createCopy(x1RequestMessagePropertyTree, _propertyTreeUse))
          );
        }
      }
    }
    return _newObject;
  }

  @Override
  public RequestContainer copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public RequestContainer copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final RequestContainer.Builder<_B> _other) {
    if (this.x1RequestMessage == null) {
      _other.x1RequestMessage = null;
    } else {
      _other.x1RequestMessage = new ArrayList<>();
      for (X1RequestMessage _item : this.x1RequestMessage) {
        _other.x1RequestMessage.add(((_item == null) ? null : _item.newCopyBuilder(_other)));
      }
    }
  }

  public <_B> RequestContainer.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new RequestContainer.Builder<_B>(_parentBuilder, this, true);
  }

  public RequestContainer.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static RequestContainer.Builder<Void> builder() {
    return new RequestContainer.Builder<>(null, null, false);
  }

  public static <_B> RequestContainer.Builder<_B> copyOf(final RequestContainer _other) {
    final RequestContainer.Builder<_B> _newBuilder = new RequestContainer.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final RequestContainer.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree x1RequestMessagePropertyTree =
      ((_propertyTree == null) ? null : _propertyTree.get("x1RequestMessage"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (x1RequestMessagePropertyTree != null)
          : ((x1RequestMessagePropertyTree == null) || (!x1RequestMessagePropertyTree.isLeaf())))
    ) {
      if (this.x1RequestMessage == null) {
        _other.x1RequestMessage = null;
      } else {
        _other.x1RequestMessage = new ArrayList<>();
        for (X1RequestMessage _item : this.x1RequestMessage) {
          _other.x1RequestMessage.add(
            ((_item == null) ? null : _item.newCopyBuilder(_other, x1RequestMessagePropertyTree, _propertyTreeUse))
          );
        }
      }
    }
  }

  public <_B> RequestContainer.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new RequestContainer.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public RequestContainer.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> RequestContainer.Builder<_B> copyOf(
    final RequestContainer _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final RequestContainer.Builder<_B> _newBuilder = new RequestContainer.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static RequestContainer.Builder<Void> copyExcept(
    final RequestContainer _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static RequestContainer.Builder<Void> copyOnly(
    final RequestContainer _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final RequestContainer _storedValue;
    private List<X1RequestMessage.Builder<RequestContainer.Builder<_B>>> x1RequestMessage;

    public Builder(final _B _parentBuilder, final RequestContainer _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          if (_other.x1RequestMessage == null) {
            this.x1RequestMessage = null;
          } else {
            this.x1RequestMessage = new ArrayList<>();
            for (X1RequestMessage _item : _other.x1RequestMessage) {
              this.x1RequestMessage.add(((_item == null) ? null : _item.newCopyBuilder(this)));
            }
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final RequestContainer _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree x1RequestMessagePropertyTree =
            ((_propertyTree == null) ? null : _propertyTree.get("x1RequestMessage"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (x1RequestMessagePropertyTree != null)
                : ((x1RequestMessagePropertyTree == null) || (!x1RequestMessagePropertyTree.isLeaf())))
          ) {
            if (_other.x1RequestMessage == null) {
              this.x1RequestMessage = null;
            } else {
              this.x1RequestMessage = new ArrayList<>();
              for (X1RequestMessage _item : _other.x1RequestMessage) {
                this.x1RequestMessage.add(
                    ((_item == null)
                        ? null
                        : _item.newCopyBuilder(this, x1RequestMessagePropertyTree, _propertyTreeUse))
                  );
              }
            }
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends RequestContainer> _P init(final _P _product) {
      if (this.x1RequestMessage != null) {
        final List<X1RequestMessage> x1RequestMessage = new ArrayList<>(this.x1RequestMessage.size());
        for (X1RequestMessage.Builder<RequestContainer.Builder<_B>> _item : this.x1RequestMessage) {
          x1RequestMessage.add(_item.build());
        }
        _product.x1RequestMessage = x1RequestMessage;
      }
      return _product;
    }

    /**
     * Adds the given items to the value of "x1RequestMessage"
     *
     * @param x1RequestMessage
     *     Items to add to the value of the "x1RequestMessage" property
     */
    public RequestContainer.Builder<_B> addX1RequestMessage(
      final Iterable<? extends X1RequestMessage> x1RequestMessage
    ) {
      if (x1RequestMessage != null) {
        if (this.x1RequestMessage == null) {
          this.x1RequestMessage = new ArrayList<>();
        }
        for (X1RequestMessage _item : x1RequestMessage) {
          this.x1RequestMessage.add(new X1RequestMessage.Builder<>(this, _item, false));
        }
      }
      return this;
    }

    /**
     * Sets the new value of "x1RequestMessage" (any previous value will be replaced)
     *
     * @param x1RequestMessage
     *     New value of the "x1RequestMessage" property.
     */
    public RequestContainer.Builder<_B> withX1RequestMessage(
      final Iterable<? extends X1RequestMessage> x1RequestMessage
    ) {
      if (this.x1RequestMessage != null) {
        this.x1RequestMessage.clear();
      }
      return addX1RequestMessage(x1RequestMessage);
    }

    /**
     * Adds the given items to the value of "x1RequestMessage"
     *
     * @param x1RequestMessage
     *     Items to add to the value of the "x1RequestMessage" property
     */
    public RequestContainer.Builder<_B> addX1RequestMessage(X1RequestMessage... x1RequestMessage) {
      addX1RequestMessage(Arrays.asList(x1RequestMessage));
      return this;
    }

    /**
     * Sets the new value of "x1RequestMessage" (any previous value will be replaced)
     *
     * @param x1RequestMessage
     *     New value of the "x1RequestMessage" property.
     */
    public RequestContainer.Builder<_B> withX1RequestMessage(X1RequestMessage... x1RequestMessage) {
      withX1RequestMessage(Arrays.asList(x1RequestMessage));
      return this;
    }

    /**
     * Returns a new builder to build an additional value of the "X1RequestMessage"
     * property.
     * Use {@link org.etsi.uri._03221.x1._2017._10.X1RequestMessage.Builder#end()} to
     * return to the current builder.
     *
     * @return
     *     a new builder to build an additional value of the "X1RequestMessage" property.
     *     Use {@link org.etsi.uri._03221.x1._2017._10.X1RequestMessage.Builder#end()} to
     *     return to the current builder.
     */
    public X1RequestMessage.Builder<? extends RequestContainer.Builder<_B>> addX1RequestMessage() {
      if (this.x1RequestMessage == null) {
        this.x1RequestMessage = new ArrayList<>();
      }
      final X1RequestMessage.Builder<RequestContainer.Builder<_B>> x1RequestMessage_Builder =
        new X1RequestMessage.Builder<>(this, null, false);
      this.x1RequestMessage.add(x1RequestMessage_Builder);
      return x1RequestMessage_Builder;
    }

    @Override
    public RequestContainer build() {
      if (_storedValue == null) {
        return this.init(new RequestContainer());
      } else {
        return ((RequestContainer) _storedValue);
      }
    }

    public RequestContainer.Builder<_B> copyOf(final RequestContainer _other) {
      _other.copyTo(this);
      return this;
    }

    public RequestContainer.Builder<_B> copyOf(final RequestContainer.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends RequestContainer.Selector<RequestContainer.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static RequestContainer.Select _root() {
      return new RequestContainer.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private X1RequestMessage.Selector<TRoot, RequestContainer.Selector<TRoot, TParent>> x1RequestMessage = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.x1RequestMessage != null) {
        products.put("x1RequestMessage", this.x1RequestMessage.init());
      }
      return products;
    }

    public X1RequestMessage.Selector<TRoot, RequestContainer.Selector<TRoot, TParent>> x1RequestMessage() {
      return (
        (this.x1RequestMessage == null)
          ? this.x1RequestMessage = new X1RequestMessage.Selector<>(this._root, this, "x1RequestMessage")
          : this.x1RequestMessage
      );
    }
  }
}
