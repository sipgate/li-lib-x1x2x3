//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

/*
 * SPDX-License-Identifier: MIT
 */
package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import java.util.HashMap;
import java.util.Map;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 * <p>Java class for ListObjectsOfTypeRequest complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ListObjectsOfTypeRequest">
 *   <complexContent>
 *     <extension base="{http://uri.etsi.org/03221/X1/2017/10}X1RequestMessage">
 *       <sequence>
 *         <element name="objectType" type="{http://uri.etsi.org/03221/X1/2017/10}GenericObjectType"/>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ListObjectsOfTypeRequest", propOrder = { "objectType" })
public class ListObjectsOfTypeRequest extends X1RequestMessage implements Copyable, PartialCopyable {

  @XmlElement(required = true)
  protected String objectType;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public ListObjectsOfTypeRequest() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a ListObjectsOfTypeRequest copying the state of another ListObjectsOfTypeRequest
   *
   * @param _other
   *     The original ListObjectsOfTypeRequest from which to copy state.
   */
  public ListObjectsOfTypeRequest(final ListObjectsOfTypeRequest _other) {
    super(_other);
    this.objectType = _other.objectType;
  }

  /**
   * Instantiates a ListObjectsOfTypeRequest copying the state of another ListObjectsOfTypeRequest
   *
   * @param _other
   *     The original ListObjectsOfTypeRequest from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public ListObjectsOfTypeRequest(
    final ListObjectsOfTypeRequest _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree objectTypePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectTypePropertyTree != null)
          : ((objectTypePropertyTree == null) || (!objectTypePropertyTree.isLeaf())))
    ) {
      this.objectType = _other.objectType;
    }
  }

  /**
   * Gets the value of the objectType property.
   *
   * @return
   *     possible object is
   *     {@link String }
   *
   */
  public String getObjectType() {
    return objectType;
  }

  /**
   * Sets the value of the objectType property.
   *
   * @param value
   *     allowed object is
   *     {@link String }
   *
   */
  public void setObjectType(String value) {
    this.objectType = value;
  }

  @Override
  public ListObjectsOfTypeRequest createCopy() {
    final ListObjectsOfTypeRequest _newObject = ((ListObjectsOfTypeRequest) super.createCopy());
    _newObject.objectType = this.objectType;
    return _newObject;
  }

  @Override
  public ListObjectsOfTypeRequest createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final ListObjectsOfTypeRequest _newObject =
      ((ListObjectsOfTypeRequest) super.createCopy(_propertyTree, _propertyTreeUse));
    final PropertyTree objectTypePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectTypePropertyTree != null)
          : ((objectTypePropertyTree == null) || (!objectTypePropertyTree.isLeaf())))
    ) {
      _newObject.objectType = this.objectType;
    }
    return _newObject;
  }

  @Override
  public ListObjectsOfTypeRequest copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public ListObjectsOfTypeRequest copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final ListObjectsOfTypeRequest.Builder<_B> _other) {
    super.copyTo(_other);
    _other.objectType = this.objectType;
  }

  @Override
  public <_B> ListObjectsOfTypeRequest.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new ListObjectsOfTypeRequest.Builder<_B>(_parentBuilder, this, true);
  }

  @Override
  public ListObjectsOfTypeRequest.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static ListObjectsOfTypeRequest.Builder<Void> builder() {
    return new ListObjectsOfTypeRequest.Builder<>(null, null, false);
  }

  public static <_B> ListObjectsOfTypeRequest.Builder<_B> copyOf(final X1RequestMessage _other) {
    final ListObjectsOfTypeRequest.Builder<_B> _newBuilder = new ListObjectsOfTypeRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  public static <_B> ListObjectsOfTypeRequest.Builder<_B> copyOf(final ListObjectsOfTypeRequest _other) {
    final ListObjectsOfTypeRequest.Builder<_B> _newBuilder = new ListObjectsOfTypeRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final ListObjectsOfTypeRequest.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    super.copyTo(_other, _propertyTree, _propertyTreeUse);
    final PropertyTree objectTypePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectType"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (objectTypePropertyTree != null)
          : ((objectTypePropertyTree == null) || (!objectTypePropertyTree.isLeaf())))
    ) {
      _other.objectType = this.objectType;
    }
  }

  @Override
  public <_B> ListObjectsOfTypeRequest.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new ListObjectsOfTypeRequest.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  @Override
  public ListObjectsOfTypeRequest.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> ListObjectsOfTypeRequest.Builder<_B> copyOf(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ListObjectsOfTypeRequest.Builder<_B> _newBuilder = new ListObjectsOfTypeRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static <_B> ListObjectsOfTypeRequest.Builder<_B> copyOf(
    final ListObjectsOfTypeRequest _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final ListObjectsOfTypeRequest.Builder<_B> _newBuilder = new ListObjectsOfTypeRequest.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static ListObjectsOfTypeRequest.Builder<Void> copyExcept(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ListObjectsOfTypeRequest.Builder<Void> copyExcept(
    final ListObjectsOfTypeRequest _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ListObjectsOfTypeRequest.Builder<Void> copyOnly(
    final X1RequestMessage _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static ListObjectsOfTypeRequest.Builder<Void> copyOnly(
    final ListObjectsOfTypeRequest _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> extends X1RequestMessage.Builder<_B> implements Buildable {

    private String objectType;

    public Builder(final _B _parentBuilder, final ListObjectsOfTypeRequest _other, final boolean _copy) {
      super(_parentBuilder, _other, _copy);
      if (_other != null) {
        this.objectType = _other.objectType;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final ListObjectsOfTypeRequest _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
      if (_other != null) {
        final PropertyTree objectTypePropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("objectType"));
        if (
          ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
              ? (objectTypePropertyTree != null)
              : ((objectTypePropertyTree == null) || (!objectTypePropertyTree.isLeaf())))
        ) {
          this.objectType = _other.objectType;
        }
      }
    }

    protected <_P extends ListObjectsOfTypeRequest> _P init(final _P _product) {
      _product.objectType = this.objectType;
      return super.init(_product);
    }

    /**
     * Sets the new value of "objectType" (any previous value will be replaced)
     *
     * @param objectType
     *     New value of the "objectType" property.
     */
    public ListObjectsOfTypeRequest.Builder<_B> withObjectType(final String objectType) {
      this.objectType = objectType;
      return this;
    }

    /**
     * Sets the new value of "admfIdentifier" (any previous value will be replaced)
     *
     * @param admfIdentifier
     *     New value of the "admfIdentifier" property.
     */
    @Override
    public ListObjectsOfTypeRequest.Builder<_B> withAdmfIdentifier(final String admfIdentifier) {
      super.withAdmfIdentifier(admfIdentifier);
      return this;
    }

    /**
     * Sets the new value of "neIdentifier" (any previous value will be replaced)
     *
     * @param neIdentifier
     *     New value of the "neIdentifier" property.
     */
    @Override
    public ListObjectsOfTypeRequest.Builder<_B> withNeIdentifier(final String neIdentifier) {
      super.withNeIdentifier(neIdentifier);
      return this;
    }

    /**
     * Sets the new value of "messageTimestamp" (any previous value will be replaced)
     *
     * @param messageTimestamp
     *     New value of the "messageTimestamp" property.
     */
    @Override
    public ListObjectsOfTypeRequest.Builder<_B> withMessageTimestamp(final XMLGregorianCalendar messageTimestamp) {
      super.withMessageTimestamp(messageTimestamp);
      return this;
    }

    /**
     * Sets the new value of "version" (any previous value will be replaced)
     *
     * @param version
     *     New value of the "version" property.
     */
    @Override
    public ListObjectsOfTypeRequest.Builder<_B> withVersion(final String version) {
      super.withVersion(version);
      return this;
    }

    /**
     * Sets the new value of "x1TransactionId" (any previous value will be replaced)
     *
     * @param x1TransactionId
     *     New value of the "x1TransactionId" property.
     */
    @Override
    public ListObjectsOfTypeRequest.Builder<_B> withX1TransactionId(final String x1TransactionId) {
      super.withX1TransactionId(x1TransactionId);
      return this;
    }

    @Override
    public ListObjectsOfTypeRequest build() {
      if (_storedValue == null) {
        return this.init(new ListObjectsOfTypeRequest());
      } else {
        return ((ListObjectsOfTypeRequest) _storedValue);
      }
    }

    public ListObjectsOfTypeRequest.Builder<_B> copyOf(final ListObjectsOfTypeRequest _other) {
      _other.copyTo(this);
      return this;
    }

    public ListObjectsOfTypeRequest.Builder<_B> copyOf(final ListObjectsOfTypeRequest.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends ListObjectsOfTypeRequest.Selector<ListObjectsOfTypeRequest.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ListObjectsOfTypeRequest.Select _root() {
      return new ListObjectsOfTypeRequest.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends X1RequestMessage.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ListObjectsOfTypeRequest.Selector<TRoot, TParent>> objectType = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.objectType != null) {
        products.put("objectType", this.objectType.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ListObjectsOfTypeRequest.Selector<TRoot, TParent>> objectType() {
      return (
        (this.objectType == null)
          ? this.objectType = new com.kscs.util.jaxb.Selector<>(this._root, this, "objectType")
          : this.objectType
      );
    }
  }
}
