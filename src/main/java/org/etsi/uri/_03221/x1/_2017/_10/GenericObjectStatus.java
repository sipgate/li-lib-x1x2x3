//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03221.x1._2017._10;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlType;
import java.util.HashMap;
import java.util.Map;

/**
 * <p>Java class for GenericObjectStatus complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="GenericObjectStatus">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GenericObjectStatus")
public class GenericObjectStatus implements Copyable, PartialCopyable {

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public GenericObjectStatus() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a GenericObjectStatus copying the state of another GenericObjectStatus
   *
   * @param _other
   *     The original GenericObjectStatus from which to copy state.
   */
  public GenericObjectStatus(final GenericObjectStatus _other) {}

  /**
   * Instantiates a GenericObjectStatus copying the state of another GenericObjectStatus
   *
   * @param _other
   *     The original GenericObjectStatus from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public GenericObjectStatus(
    final GenericObjectStatus _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {}

  @Override
  public GenericObjectStatus createCopy() {
    final GenericObjectStatus _newObject;
    try {
      _newObject = ((GenericObjectStatus) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    return _newObject;
  }

  @Override
  public GenericObjectStatus createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final GenericObjectStatus _newObject;
    try {
      _newObject = ((GenericObjectStatus) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    return _newObject;
  }

  @Override
  public GenericObjectStatus copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public GenericObjectStatus copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final GenericObjectStatus.Builder<_B> _other) {}

  public <_B> GenericObjectStatus.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new GenericObjectStatus.Builder<_B>(_parentBuilder, this, true);
  }

  public GenericObjectStatus.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static GenericObjectStatus.Builder<Void> builder() {
    return new GenericObjectStatus.Builder<>(null, null, false);
  }

  public static <_B> GenericObjectStatus.Builder<_B> copyOf(final GenericObjectStatus _other) {
    final GenericObjectStatus.Builder<_B> _newBuilder = new GenericObjectStatus.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final GenericObjectStatus.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {}

  public <_B> GenericObjectStatus.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new GenericObjectStatus.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public GenericObjectStatus.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> GenericObjectStatus.Builder<_B> copyOf(
    final GenericObjectStatus _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final GenericObjectStatus.Builder<_B> _newBuilder = new GenericObjectStatus.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static GenericObjectStatus.Builder<Void> copyExcept(
    final GenericObjectStatus _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static GenericObjectStatus.Builder<Void> copyOnly(
    final GenericObjectStatus _other,
    final PropertyTree _propertyTree
  ) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final GenericObjectStatus _storedValue;

    public Builder(final _B _parentBuilder, final GenericObjectStatus _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final GenericObjectStatus _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends GenericObjectStatus> _P init(final _P _product) {
      return _product;
    }

    @Override
    public GenericObjectStatus build() {
      if (_storedValue == null) {
        return this.init(new GenericObjectStatus());
      } else {
        return ((GenericObjectStatus) _storedValue);
      }
    }

    public GenericObjectStatus.Builder<_B> copyOf(final GenericObjectStatus _other) {
      _other.copyTo(this);
      return this;
    }

    public GenericObjectStatus.Builder<_B> copyOf(final GenericObjectStatus.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends GenericObjectStatus.Selector<GenericObjectStatus.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static GenericObjectStatus.Select _root() {
      return new GenericObjectStatus.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      return products;
    }
  }
}
