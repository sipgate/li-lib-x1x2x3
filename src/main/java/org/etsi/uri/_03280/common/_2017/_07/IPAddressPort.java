//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package org.etsi.uri._03280.common._2017._07;

import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;
import java.util.HashMap;
import java.util.Map;

/**
 * <p>Java class for IPAddressPort complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="IPAddressPort">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="address" type="{http://uri.etsi.org/03280/common/2017/07}IPAddress"/>
 *         <element name="port" type="{http://uri.etsi.org/03280/common/2017/07}Port"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IPAddressPort", propOrder = { "address", "port" })
public class IPAddressPort implements Copyable, PartialCopyable {

  @XmlElement(required = true)
  protected IPAddress address;

  @XmlElement(required = true)
  protected Port port;

  /**
   * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
   *
   */
  public IPAddressPort() {
    // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
  }

  /**
   * Instantiates a IPAddressPort copying the state of another IPAddressPort
   *
   * @param _other
   *     The original IPAddressPort from which to copy state.
   */
  public IPAddressPort(final IPAddressPort _other) {
    this.address = ((_other.address == null) ? null : _other.address.createCopy());
    this.port = ((_other.port == null) ? null : _other.port.createCopy());
  }

  /**
   * Instantiates a IPAddressPort copying the state of another IPAddressPort
   *
   * @param _other
   *     The original IPAddressPort from which to copy state.
   * @param _propertyTree
   *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
   * @param _propertyTreeUse
   *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
   */
  public IPAddressPort(
    final IPAddressPort _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree addressPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("address"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (addressPropertyTree != null)
          : ((addressPropertyTree == null) || (!addressPropertyTree.isLeaf())))
    ) {
      this.address = ((_other.address == null)
          ? null
          : _other.address.createCopy(addressPropertyTree, _propertyTreeUse));
    }
    final PropertyTree portPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("port"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (portPropertyTree != null)
          : ((portPropertyTree == null) || (!portPropertyTree.isLeaf())))
    ) {
      this.port = ((_other.port == null) ? null : _other.port.createCopy(portPropertyTree, _propertyTreeUse));
    }
  }

  /**
   * Gets the value of the address property.
   *
   * @return
   *     possible object is
   *     {@link IPAddress }
   *
   */
  public IPAddress getAddress() {
    return address;
  }

  /**
   * Sets the value of the address property.
   *
   * @param value
   *     allowed object is
   *     {@link IPAddress }
   *
   */
  public void setAddress(IPAddress value) {
    this.address = value;
  }

  /**
   * Gets the value of the port property.
   *
   * @return
   *     possible object is
   *     {@link Port }
   *
   */
  public Port getPort() {
    return port;
  }

  /**
   * Sets the value of the port property.
   *
   * @param value
   *     allowed object is
   *     {@link Port }
   *
   */
  public void setPort(Port value) {
    this.port = value;
  }

  @Override
  public IPAddressPort createCopy() {
    final IPAddressPort _newObject;
    try {
      _newObject = ((IPAddressPort) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    _newObject.address = ((this.address == null) ? null : this.address.createCopy());
    _newObject.port = ((this.port == null) ? null : this.port.createCopy());
    return _newObject;
  }

  @Override
  public IPAddressPort createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
    final IPAddressPort _newObject;
    try {
      _newObject = ((IPAddressPort) super.clone());
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    final PropertyTree addressPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("address"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (addressPropertyTree != null)
          : ((addressPropertyTree == null) || (!addressPropertyTree.isLeaf())))
    ) {
      _newObject.address = ((this.address == null)
          ? null
          : this.address.createCopy(addressPropertyTree, _propertyTreeUse));
    }
    final PropertyTree portPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("port"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (portPropertyTree != null)
          : ((portPropertyTree == null) || (!portPropertyTree.isLeaf())))
    ) {
      _newObject.port = ((this.port == null) ? null : this.port.createCopy(portPropertyTree, _propertyTreeUse));
    }
    return _newObject;
  }

  @Override
  public IPAddressPort copyExcept(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
  }

  @Override
  public IPAddressPort copyOnly(final PropertyTree _propertyTree) {
    return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(final IPAddressPort.Builder<_B> _other) {
    _other.address = ((this.address == null) ? null : this.address.newCopyBuilder(_other));
    _other.port = ((this.port == null) ? null : this.port.newCopyBuilder(_other));
  }

  public <_B> IPAddressPort.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
    return new IPAddressPort.Builder<_B>(_parentBuilder, this, true);
  }

  public IPAddressPort.Builder<Void> newCopyBuilder() {
    return newCopyBuilder(null);
  }

  public static IPAddressPort.Builder<Void> builder() {
    return new IPAddressPort.Builder<>(null, null, false);
  }

  public static <_B> IPAddressPort.Builder<_B> copyOf(final IPAddressPort _other) {
    final IPAddressPort.Builder<_B> _newBuilder = new IPAddressPort.Builder<>(null, null, false);
    _other.copyTo(_newBuilder);
    return _newBuilder;
  }

  /**
   * Copies all state of this object to a builder. This method is used by the copyOf
   * method and should not be called directly by client code.
   *
   * @param _other
   *     A builder instance to which the state of this object will be copied.
   */
  public <_B> void copyTo(
    final IPAddressPort.Builder<_B> _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final PropertyTree addressPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("address"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (addressPropertyTree != null)
          : ((addressPropertyTree == null) || (!addressPropertyTree.isLeaf())))
    ) {
      _other.address = ((this.address == null)
          ? null
          : this.address.newCopyBuilder(_other, addressPropertyTree, _propertyTreeUse));
    }
    final PropertyTree portPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("port"));
    if (
      ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
          ? (portPropertyTree != null)
          : ((portPropertyTree == null) || (!portPropertyTree.isLeaf())))
    ) {
      _other.port = ((this.port == null) ? null : this.port.newCopyBuilder(_other, portPropertyTree, _propertyTreeUse));
    }
  }

  public <_B> IPAddressPort.Builder<_B> newCopyBuilder(
    final _B _parentBuilder,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return new IPAddressPort.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
  }

  public IPAddressPort.Builder<Void> newCopyBuilder(
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
  }

  public static <_B> IPAddressPort.Builder<_B> copyOf(
    final IPAddressPort _other,
    final PropertyTree _propertyTree,
    final PropertyTreeUse _propertyTreeUse
  ) {
    final IPAddressPort.Builder<_B> _newBuilder = new IPAddressPort.Builder<>(null, null, false);
    _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
    return _newBuilder;
  }

  public static IPAddressPort.Builder<Void> copyExcept(final IPAddressPort _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static IPAddressPort.Builder<Void> copyOnly(final IPAddressPort _other, final PropertyTree _propertyTree) {
    return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
  }

  public static class Builder<_B> implements Buildable {

    protected final _B _parentBuilder;
    protected final IPAddressPort _storedValue;
    private IPAddress.Builder<IPAddressPort.Builder<_B>> address;
    private Port.Builder<IPAddressPort.Builder<_B>> port;

    public Builder(final _B _parentBuilder, final IPAddressPort _other, final boolean _copy) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          this.address = ((_other.address == null) ? null : _other.address.newCopyBuilder(this));
          this.port = ((_other.port == null) ? null : _other.port.newCopyBuilder(this));
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public Builder(
      final _B _parentBuilder,
      final IPAddressPort _other,
      final boolean _copy,
      final PropertyTree _propertyTree,
      final PropertyTreeUse _propertyTreeUse
    ) {
      this._parentBuilder = _parentBuilder;
      if (_other != null) {
        if (_copy) {
          _storedValue = null;
          final PropertyTree addressPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("address"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (addressPropertyTree != null)
                : ((addressPropertyTree == null) || (!addressPropertyTree.isLeaf())))
          ) {
            this.address = ((_other.address == null)
                ? null
                : _other.address.newCopyBuilder(this, addressPropertyTree, _propertyTreeUse));
          }
          final PropertyTree portPropertyTree = ((_propertyTree == null) ? null : _propertyTree.get("port"));
          if (
            ((_propertyTreeUse == PropertyTreeUse.INCLUDE)
                ? (portPropertyTree != null)
                : ((portPropertyTree == null) || (!portPropertyTree.isLeaf())))
          ) {
            this.port = ((_other.port == null)
                ? null
                : _other.port.newCopyBuilder(this, portPropertyTree, _propertyTreeUse));
          }
        } else {
          _storedValue = _other;
        }
      } else {
        _storedValue = null;
      }
    }

    public _B end() {
      return this._parentBuilder;
    }

    protected <_P extends IPAddressPort> _P init(final _P _product) {
      _product.address = ((this.address == null) ? null : this.address.build());
      _product.port = ((this.port == null) ? null : this.port.build());
      return _product;
    }

    /**
     * Sets the new value of "address" (any previous value will be replaced)
     *
     * @param address
     *     New value of the "address" property.
     */
    public IPAddressPort.Builder<_B> withAddress(final IPAddress address) {
      this.address = ((address == null) ? null : new IPAddress.Builder<>(this, address, false));
      return this;
    }

    /**
     * Returns the existing builder or a new builder to build the value of the
     * "address" property.
     * Use {@link org.etsi.uri._03280.common._2017._07.IPAddress.Builder#end()} to
     * return to the current builder.
     *
     * @return
     *     A new builder to build the value of the "address" property.
     *     Use {@link org.etsi.uri._03280.common._2017._07.IPAddress.Builder#end()} to
     *     return to the current builder.
     */
    public IPAddress.Builder<? extends IPAddressPort.Builder<_B>> withAddress() {
      if (this.address != null) {
        return this.address;
      }
      return this.address = new IPAddress.Builder<>(this, null, false);
    }

    /**
     * Sets the new value of "port" (any previous value will be replaced)
     *
     * @param port
     *     New value of the "port" property.
     */
    public IPAddressPort.Builder<_B> withPort(final Port port) {
      this.port = ((port == null) ? null : new Port.Builder<>(this, port, false));
      return this;
    }

    /**
     * Returns the existing builder or a new builder to build the value of the "port"
     * property.
     * Use {@link org.etsi.uri._03280.common._2017._07.Port.Builder#end()} to return to
     * the current builder.
     *
     * @return
     *     A new builder to build the value of the "port" property.
     *     Use {@link org.etsi.uri._03280.common._2017._07.Port.Builder#end()} to return to
     *     the current builder.
     */
    public Port.Builder<? extends IPAddressPort.Builder<_B>> withPort() {
      if (this.port != null) {
        return this.port;
      }
      return this.port = new Port.Builder<>(this, null, false);
    }

    @Override
    public IPAddressPort build() {
      if (_storedValue == null) {
        return this.init(new IPAddressPort());
      } else {
        return ((IPAddressPort) _storedValue);
      }
    }

    public IPAddressPort.Builder<_B> copyOf(final IPAddressPort _other) {
      _other.copyTo(this);
      return this;
    }

    public IPAddressPort.Builder<_B> copyOf(final IPAddressPort.Builder _other) {
      return copyOf(_other.build());
    }
  }

  public static class Select extends IPAddressPort.Selector<IPAddressPort.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static IPAddressPort.Select _root() {
      return new IPAddressPort.Select();
    }
  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
    extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private IPAddress.Selector<TRoot, IPAddressPort.Selector<TRoot, TParent>> address = null;
    private Port.Selector<TRoot, IPAddressPort.Selector<TRoot, TParent>> port = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<>();
      products.putAll(super.buildChildren());
      if (this.address != null) {
        products.put("address", this.address.init());
      }
      if (this.port != null) {
        products.put("port", this.port.init());
      }
      return products;
    }

    public IPAddress.Selector<TRoot, IPAddressPort.Selector<TRoot, TParent>> address() {
      return (
        (this.address == null) ? this.address = new IPAddress.Selector<>(this._root, this, "address") : this.address
      );
    }

    public Port.Selector<TRoot, IPAddressPort.Selector<TRoot, TParent>> port() {
      return ((this.port == null) ? this.port = new Port.Selector<>(this._root, this, "port") : this.port);
    }
  }
}
